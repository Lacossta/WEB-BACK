
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSessions
 * 
 */
export type UserSessions = $Result.DefaultSelection<Prisma.$UserSessionsPayload>
/**
 * Model UserInfo
 * 
 */
export type UserInfo = $Result.DefaultSelection<Prisma.$UserInfoPayload>
/**
 * Model PaymentMethod
 * 
 */
export type PaymentMethod = $Result.DefaultSelection<Prisma.$PaymentMethodPayload>
/**
 * Model LangCourses
 * 
 */
export type LangCourses = $Result.DefaultSelection<Prisma.$LangCoursesPayload>
/**
 * Model BuyedCouse
 * 
 */
export type BuyedCouse = $Result.DefaultSelection<Prisma.$BuyedCousePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Roles: {
  User: 'User',
  Admin: 'Admin'
};

export type Roles = (typeof Roles)[keyof typeof Roles]


export const Langs: {
  En: 'En',
  De: 'De',
  Fra: 'Fra',
  Esp: 'Esp',
  Ita: 'Ita'
};

export type Langs = (typeof Langs)[keyof typeof Langs]


export const CoursesFormats: {
  online: 'online',
  offline: 'offline'
};

export type CoursesFormats = (typeof CoursesFormats)[keyof typeof CoursesFormats]

}

export type Roles = $Enums.Roles

export const Roles: typeof $Enums.Roles

export type Langs = $Enums.Langs

export const Langs: typeof $Enums.Langs

export type CoursesFormats = $Enums.CoursesFormats

export const CoursesFormats: typeof $Enums.CoursesFormats

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userSessions`: Exposes CRUD operations for the **UserSessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSessions.findMany()
    * ```
    */
  get userSessions(): Prisma.UserSessionsDelegate<ExtArgs>;

  /**
   * `prisma.userInfo`: Exposes CRUD operations for the **UserInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInfos
    * const userInfos = await prisma.userInfo.findMany()
    * ```
    */
  get userInfo(): Prisma.UserInfoDelegate<ExtArgs>;

  /**
   * `prisma.paymentMethod`: Exposes CRUD operations for the **PaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMethods
    * const paymentMethods = await prisma.paymentMethod.findMany()
    * ```
    */
  get paymentMethod(): Prisma.PaymentMethodDelegate<ExtArgs>;

  /**
   * `prisma.langCourses`: Exposes CRUD operations for the **LangCourses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LangCourses
    * const langCourses = await prisma.langCourses.findMany()
    * ```
    */
  get langCourses(): Prisma.LangCoursesDelegate<ExtArgs>;

  /**
   * `prisma.buyedCouse`: Exposes CRUD operations for the **BuyedCouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuyedCouses
    * const buyedCouses = await prisma.buyedCouse.findMany()
    * ```
    */
  get buyedCouse(): Prisma.BuyedCouseDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSessions: 'UserSessions',
    UserInfo: 'UserInfo',
    PaymentMethod: 'PaymentMethod',
    LangCourses: 'LangCourses',
    BuyedCouse: 'BuyedCouse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'userSessions' | 'userInfo' | 'paymentMethod' | 'langCourses' | 'buyedCouse'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSessions: {
        payload: Prisma.$UserSessionsPayload<ExtArgs>
        fields: Prisma.UserSessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          findFirst: {
            args: Prisma.UserSessionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          findMany: {
            args: Prisma.UserSessionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>[]
          }
          create: {
            args: Prisma.UserSessionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          createMany: {
            args: Prisma.UserSessionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserSessionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          update: {
            args: Prisma.UserSessionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserSessionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSessionsPayload>
          }
          aggregate: {
            args: Prisma.UserSessionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserSessions>
          }
          groupBy: {
            args: Prisma.UserSessionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserSessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionsCountArgs<ExtArgs>,
            result: $Utils.Optional<UserSessionsCountAggregateOutputType> | number
          }
        }
      }
      UserInfo: {
        payload: Prisma.$UserInfoPayload<ExtArgs>
        fields: Prisma.UserInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findFirst: {
            args: Prisma.UserInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findMany: {
            args: Prisma.UserInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>[]
          }
          create: {
            args: Prisma.UserInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          createMany: {
            args: Prisma.UserInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          update: {
            args: Prisma.UserInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          deleteMany: {
            args: Prisma.UserInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          aggregate: {
            args: Prisma.UserInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserInfo>
          }
          groupBy: {
            args: Prisma.UserInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<UserInfoCountAggregateOutputType> | number
          }
        }
      }
      PaymentMethod: {
        payload: Prisma.$PaymentMethodPayload<ExtArgs>
        fields: Prisma.PaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findMany: {
            args: Prisma.PaymentMethodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          create: {
            args: Prisma.PaymentMethodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          createMany: {
            args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentMethodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          update: {
            args: Prisma.PaymentMethodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentMethodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.PaymentMethodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaymentMethod>
          }
          groupBy: {
            args: Prisma.PaymentMethodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMethodCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentMethodCountAggregateOutputType> | number
          }
        }
      }
      LangCourses: {
        payload: Prisma.$LangCoursesPayload<ExtArgs>
        fields: Prisma.LangCoursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LangCoursesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LangCoursesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          findFirst: {
            args: Prisma.LangCoursesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LangCoursesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          findMany: {
            args: Prisma.LangCoursesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>[]
          }
          create: {
            args: Prisma.LangCoursesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          createMany: {
            args: Prisma.LangCoursesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LangCoursesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          update: {
            args: Prisma.LangCoursesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          deleteMany: {
            args: Prisma.LangCoursesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LangCoursesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LangCoursesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LangCoursesPayload>
          }
          aggregate: {
            args: Prisma.LangCoursesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLangCourses>
          }
          groupBy: {
            args: Prisma.LangCoursesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LangCoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LangCoursesCountArgs<ExtArgs>,
            result: $Utils.Optional<LangCoursesCountAggregateOutputType> | number
          }
        }
      }
      BuyedCouse: {
        payload: Prisma.$BuyedCousePayload<ExtArgs>
        fields: Prisma.BuyedCouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyedCouseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyedCouseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          findFirst: {
            args: Prisma.BuyedCouseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyedCouseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          findMany: {
            args: Prisma.BuyedCouseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>[]
          }
          create: {
            args: Prisma.BuyedCouseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          createMany: {
            args: Prisma.BuyedCouseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BuyedCouseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          update: {
            args: Prisma.BuyedCouseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          deleteMany: {
            args: Prisma.BuyedCouseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BuyedCouseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BuyedCouseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyedCousePayload>
          }
          aggregate: {
            args: Prisma.BuyedCouseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBuyedCouse>
          }
          groupBy: {
            args: Prisma.BuyedCouseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BuyedCouseGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyedCouseCountArgs<ExtArgs>,
            result: $Utils.Optional<BuyedCouseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userSessions: number
    langCourses: number
    buyed: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSessions?: boolean | UserCountOutputTypeCountUserSessionsArgs
    langCourses?: boolean | UserCountOutputTypeCountLangCoursesArgs
    buyed?: boolean | UserCountOutputTypeCountBuyedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLangCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LangCoursesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBuyedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyedCouseWhereInput
  }


  /**
   * Count Type LangCoursesCountOutputType
   */

  export type LangCoursesCountOutputType = {
    users: number
    buyed: number
  }

  export type LangCoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | LangCoursesCountOutputTypeCountUsersArgs
    buyed?: boolean | LangCoursesCountOutputTypeCountBuyedArgs
  }

  // Custom InputTypes
  /**
   * LangCoursesCountOutputType without action
   */
  export type LangCoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCoursesCountOutputType
     */
    select?: LangCoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LangCoursesCountOutputType without action
   */
  export type LangCoursesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * LangCoursesCountOutputType without action
   */
  export type LangCoursesCountOutputTypeCountBuyedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyedCouseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    login: string | null
    email: string | null
    password: string | null
    role: $Enums.Roles | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    login: string | null
    email: string | null
    password: string | null
    role: $Enums.Roles | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    login: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    login?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    login?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    login?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    login: string
    email: string
    password: string
    role: $Enums.Roles
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    login?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    userInfo?: boolean | User$userInfoArgs<ExtArgs>
    langCourses?: boolean | User$langCoursesArgs<ExtArgs>
    payment?: boolean | User$paymentArgs<ExtArgs>
    buyed?: boolean | User$buyedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    login?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    userInfo?: boolean | User$userInfoArgs<ExtArgs>
    langCourses?: boolean | User$langCoursesArgs<ExtArgs>
    payment?: boolean | User$paymentArgs<ExtArgs>
    buyed?: boolean | User$buyedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userSessions: Prisma.$UserSessionsPayload<ExtArgs>[]
      userInfo: Prisma.$UserInfoPayload<ExtArgs> | null
      langCourses: Prisma.$LangCoursesPayload<ExtArgs>[]
      payment: Prisma.$PaymentMethodPayload<ExtArgs> | null
      buyed: Prisma.$BuyedCousePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      login: string
      email: string
      password: string
      role: $Enums.Roles
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userSessions<T extends User$userSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    userInfo<T extends User$userInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$userInfoArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    langCourses<T extends User$langCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$langCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findMany'> | Null>;

    payment<T extends User$paymentArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    buyed<T extends User$buyedArgs<ExtArgs> = {}>(args?: Subset<T, User$buyedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly login: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Roles'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.userSessions
   */
  export type User$userSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    where?: UserSessionsWhereInput
    orderBy?: UserSessionsOrderByWithRelationInput | UserSessionsOrderByWithRelationInput[]
    cursor?: UserSessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionsScalarFieldEnum | UserSessionsScalarFieldEnum[]
  }

  /**
   * User.userInfo
   */
  export type User$userInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    where?: UserInfoWhereInput
  }

  /**
   * User.langCourses
   */
  export type User$langCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    where?: LangCoursesWhereInput
    orderBy?: LangCoursesOrderByWithRelationInput | LangCoursesOrderByWithRelationInput[]
    cursor?: LangCoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LangCoursesScalarFieldEnum | LangCoursesScalarFieldEnum[]
  }

  /**
   * User.payment
   */
  export type User$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    where?: PaymentMethodWhereInput
  }

  /**
   * User.buyed
   */
  export type User$buyedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    where?: BuyedCouseWhereInput
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    cursor?: BuyedCouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyedCouseScalarFieldEnum | BuyedCouseScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSessions
   */

  export type AggregateUserSessions = {
    _count: UserSessionsCountAggregateOutputType | null
    _avg: UserSessionsAvgAggregateOutputType | null
    _sum: UserSessionsSumAggregateOutputType | null
    _min: UserSessionsMinAggregateOutputType | null
    _max: UserSessionsMaxAggregateOutputType | null
  }

  export type UserSessionsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserSessionsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserSessionsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    refresh_token: string | null
    createdAt: Date | null
  }

  export type UserSessionsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    refresh_token: string | null
    createdAt: Date | null
  }

  export type UserSessionsCountAggregateOutputType = {
    id: number
    userId: number
    refresh_token: number
    createdAt: number
    _all: number
  }


  export type UserSessionsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserSessionsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserSessionsMinAggregateInputType = {
    id?: true
    userId?: true
    refresh_token?: true
    createdAt?: true
  }

  export type UserSessionsMaxAggregateInputType = {
    id?: true
    userId?: true
    refresh_token?: true
    createdAt?: true
  }

  export type UserSessionsCountAggregateInputType = {
    id?: true
    userId?: true
    refresh_token?: true
    createdAt?: true
    _all?: true
  }

  export type UserSessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to aggregate.
     */
    where?: UserSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionsOrderByWithRelationInput | UserSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionsMaxAggregateInputType
  }

  export type GetUserSessionsAggregateType<T extends UserSessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSessions[P]>
      : GetScalarType<T[P], AggregateUserSessions[P]>
  }




  export type UserSessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionsWhereInput
    orderBy?: UserSessionsOrderByWithAggregationInput | UserSessionsOrderByWithAggregationInput[]
    by: UserSessionsScalarFieldEnum[] | UserSessionsScalarFieldEnum
    having?: UserSessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionsCountAggregateInputType | true
    _avg?: UserSessionsAvgAggregateInputType
    _sum?: UserSessionsSumAggregateInputType
    _min?: UserSessionsMinAggregateInputType
    _max?: UserSessionsMaxAggregateInputType
  }

  export type UserSessionsGroupByOutputType = {
    id: number
    userId: number
    refresh_token: string
    createdAt: Date
    _count: UserSessionsCountAggregateOutputType | null
    _avg: UserSessionsAvgAggregateOutputType | null
    _sum: UserSessionsSumAggregateOutputType | null
    _min: UserSessionsMinAggregateOutputType | null
    _max: UserSessionsMaxAggregateOutputType | null
  }

  type GetUserSessionsGroupByPayload<T extends UserSessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionsGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refresh_token?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSessions"]>

  export type UserSessionsSelectScalar = {
    id?: boolean
    userId?: boolean
    refresh_token?: boolean
    createdAt?: boolean
  }


  export type UserSessionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserSessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSessions"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      refresh_token: string
      createdAt: Date
    }, ExtArgs["result"]["userSessions"]>
    composites: {}
  }


  type UserSessionsGetPayload<S extends boolean | null | undefined | UserSessionsDefaultArgs> = $Result.GetResult<Prisma.$UserSessionsPayload, S>

  type UserSessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSessionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSessionsCountAggregateInputType | true
    }

  export interface UserSessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSessions'], meta: { name: 'UserSessions' } }
    /**
     * Find zero or one UserSessions that matches the filter.
     * @param {UserSessionsFindUniqueArgs} args - Arguments to find a UserSessions
     * @example
     * // Get one UserSessions
     * const userSessions = await prisma.userSessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserSessionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsFindUniqueArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserSessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserSessionsFindUniqueOrThrowArgs} args - Arguments to find a UserSessions
     * @example
     * // Get one UserSessions
     * const userSessions = await prisma.userSessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserSessionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsFindFirstArgs} args - Arguments to find a UserSessions
     * @example
     * // Get one UserSessions
     * const userSessions = await prisma.userSessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserSessionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsFindFirstArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserSessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsFindFirstOrThrowArgs} args - Arguments to find a UserSessions
     * @example
     * // Get one UserSessions
     * const userSessions = await prisma.userSessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserSessionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSessions.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionsWithIdOnly = await prisma.userSessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserSessionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserSessions.
     * @param {UserSessionsCreateArgs} args - Arguments to create a UserSessions.
     * @example
     * // Create one UserSessions
     * const UserSessions = await prisma.userSessions.create({
     *   data: {
     *     // ... data to create a UserSessions
     *   }
     * })
     * 
    **/
    create<T extends UserSessionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsCreateArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserSessions.
     *     @param {UserSessionsCreateManyArgs} args - Arguments to create many UserSessions.
     *     @example
     *     // Create many UserSessions
     *     const userSessions = await prisma.userSessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserSessionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserSessions.
     * @param {UserSessionsDeleteArgs} args - Arguments to delete one UserSessions.
     * @example
     * // Delete one UserSessions
     * const UserSessions = await prisma.userSessions.delete({
     *   where: {
     *     // ... filter to delete one UserSessions
     *   }
     * })
     * 
    **/
    delete<T extends UserSessionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsDeleteArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserSessions.
     * @param {UserSessionsUpdateArgs} args - Arguments to update one UserSessions.
     * @example
     * // Update one UserSessions
     * const userSessions = await prisma.userSessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserSessionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsUpdateArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionsDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserSessionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserSessionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSessions = await prisma.userSessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserSessionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSessions.
     * @param {UserSessionsUpsertArgs} args - Arguments to update or create a UserSessions.
     * @example
     * // Update or create a UserSessions
     * const userSessions = await prisma.userSessions.upsert({
     *   create: {
     *     // ... data to create a UserSessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSessions we want to update
     *   }
     * })
    **/
    upsert<T extends UserSessionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserSessionsUpsertArgs<ExtArgs>>
    ): Prisma__UserSessionsClient<$Result.GetResult<Prisma.$UserSessionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSessions.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionsCountArgs>(
      args?: Subset<T, UserSessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionsAggregateArgs>(args: Subset<T, UserSessionsAggregateArgs>): Prisma.PrismaPromise<GetUserSessionsAggregateType<T>>

    /**
     * Group by UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionsGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSessions model
   */
  readonly fields: UserSessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserSessions model
   */ 
  interface UserSessionsFieldRefs {
    readonly id: FieldRef<"UserSessions", 'Int'>
    readonly userId: FieldRef<"UserSessions", 'Int'>
    readonly refresh_token: FieldRef<"UserSessions", 'String'>
    readonly createdAt: FieldRef<"UserSessions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSessions findUnique
   */
  export type UserSessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where: UserSessionsWhereUniqueInput
  }

  /**
   * UserSessions findUniqueOrThrow
   */
  export type UserSessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where: UserSessionsWhereUniqueInput
  }

  /**
   * UserSessions findFirst
   */
  export type UserSessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionsOrderByWithRelationInput | UserSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionsScalarFieldEnum | UserSessionsScalarFieldEnum[]
  }

  /**
   * UserSessions findFirstOrThrow
   */
  export type UserSessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionsOrderByWithRelationInput | UserSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionsScalarFieldEnum | UserSessionsScalarFieldEnum[]
  }

  /**
   * UserSessions findMany
   */
  export type UserSessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionsOrderByWithRelationInput | UserSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionsScalarFieldEnum | UserSessionsScalarFieldEnum[]
  }

  /**
   * UserSessions create
   */
  export type UserSessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSessions.
     */
    data: XOR<UserSessionsCreateInput, UserSessionsUncheckedCreateInput>
  }

  /**
   * UserSessions createMany
   */
  export type UserSessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionsCreateManyInput | UserSessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSessions update
   */
  export type UserSessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSessions.
     */
    data: XOR<UserSessionsUpdateInput, UserSessionsUncheckedUpdateInput>
    /**
     * Choose, which UserSessions to update.
     */
    where: UserSessionsWhereUniqueInput
  }

  /**
   * UserSessions updateMany
   */
  export type UserSessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionsUpdateManyMutationInput, UserSessionsUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionsWhereInput
  }

  /**
   * UserSessions upsert
   */
  export type UserSessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSessions to update in case it exists.
     */
    where: UserSessionsWhereUniqueInput
    /**
     * In case the UserSessions found by the `where` argument doesn't exist, create a new UserSessions with this data.
     */
    create: XOR<UserSessionsCreateInput, UserSessionsUncheckedCreateInput>
    /**
     * In case the UserSessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionsUpdateInput, UserSessionsUncheckedUpdateInput>
  }

  /**
   * UserSessions delete
   */
  export type UserSessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
    /**
     * Filter which UserSessions to delete.
     */
    where: UserSessionsWhereUniqueInput
  }

  /**
   * UserSessions deleteMany
   */
  export type UserSessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionsWhereInput
  }

  /**
   * UserSessions without action
   */
  export type UserSessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessions
     */
    select?: UserSessionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionsInclude<ExtArgs> | null
  }


  /**
   * Model UserInfo
   */

  export type AggregateUserInfo = {
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  export type UserInfoAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserInfoSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserInfoMinAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    birthdate: string | null
    phone: string | null
  }

  export type UserInfoMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    birthdate: string | null
    phone: string | null
  }

  export type UserInfoCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    lastName: number
    birthdate: number
    phone: number
    _all: number
  }


  export type UserInfoAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserInfoSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserInfoMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    birthdate?: true
    phone?: true
  }

  export type UserInfoMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    birthdate?: true
    phone?: true
  }

  export type UserInfoCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    birthdate?: true
    phone?: true
    _all?: true
  }

  export type UserInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfo to aggregate.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInfos
    **/
    _count?: true | UserInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInfoMaxAggregateInputType
  }

  export type GetUserInfoAggregateType<T extends UserInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInfo[P]>
      : GetScalarType<T[P], AggregateUserInfo[P]>
  }




  export type UserInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInfoWhereInput
    orderBy?: UserInfoOrderByWithAggregationInput | UserInfoOrderByWithAggregationInput[]
    by: UserInfoScalarFieldEnum[] | UserInfoScalarFieldEnum
    having?: UserInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInfoCountAggregateInputType | true
    _avg?: UserInfoAvgAggregateInputType
    _sum?: UserInfoSumAggregateInputType
    _min?: UserInfoMinAggregateInputType
    _max?: UserInfoMaxAggregateInputType
  }

  export type UserInfoGroupByOutputType = {
    id: number
    userId: number
    firstName: string
    lastName: string
    birthdate: string
    phone: string
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  type GetUserInfoGroupByPayload<T extends UserInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
            : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
        }
      >
    >


  export type UserInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    birthdate?: boolean
    phone?: boolean
    user?: boolean | UserInfo$userArgs<ExtArgs>
  }, ExtArgs["result"]["userInfo"]>

  export type UserInfoSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    birthdate?: boolean
    phone?: boolean
  }


  export type UserInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserInfo$userArgs<ExtArgs>
  }


  export type $UserInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      firstName: string
      lastName: string
      birthdate: string
      phone: string
    }, ExtArgs["result"]["userInfo"]>
    composites: {}
  }


  type UserInfoGetPayload<S extends boolean | null | undefined | UserInfoDefaultArgs> = $Result.GetResult<Prisma.$UserInfoPayload, S>

  type UserInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInfoCountAggregateInputType | true
    }

  export interface UserInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInfo'], meta: { name: 'UserInfo' } }
    /**
     * Find zero or one UserInfo that matches the filter.
     * @param {UserInfoFindUniqueArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserInfoFindUniqueOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindFirstArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInfos
     * const userInfos = await prisma.userInfo.findMany()
     * 
     * // Get first 10 UserInfos
     * const userInfos = await prisma.userInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInfoWithIdOnly = await prisma.userInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserInfo.
     * @param {UserInfoCreateArgs} args - Arguments to create a UserInfo.
     * @example
     * // Create one UserInfo
     * const UserInfo = await prisma.userInfo.create({
     *   data: {
     *     // ... data to create a UserInfo
     *   }
     * })
     * 
    **/
    create<T extends UserInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoCreateArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserInfos.
     *     @param {UserInfoCreateManyArgs} args - Arguments to create many UserInfos.
     *     @example
     *     // Create many UserInfos
     *     const userInfo = await prisma.userInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserInfo.
     * @param {UserInfoDeleteArgs} args - Arguments to delete one UserInfo.
     * @example
     * // Delete one UserInfo
     * const UserInfo = await prisma.userInfo.delete({
     *   where: {
     *     // ... filter to delete one UserInfo
     *   }
     * })
     * 
    **/
    delete<T extends UserInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoDeleteArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserInfo.
     * @param {UserInfoUpdateArgs} args - Arguments to update one UserInfo.
     * @example
     * // Update one UserInfo
     * const userInfo = await prisma.userInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpdateArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserInfos.
     * @param {UserInfoDeleteManyArgs} args - Arguments to filter UserInfos to delete.
     * @example
     * // Delete a few UserInfos
     * const { count } = await prisma.userInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInfos
     * const userInfo = await prisma.userInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInfo.
     * @param {UserInfoUpsertArgs} args - Arguments to update or create a UserInfo.
     * @example
     * // Update or create a UserInfo
     * const userInfo = await prisma.userInfo.upsert({
     *   create: {
     *     // ... data to create a UserInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInfo we want to update
     *   }
     * })
    **/
    upsert<T extends UserInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserInfoUpsertArgs<ExtArgs>>
    ): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoCountArgs} args - Arguments to filter UserInfos to count.
     * @example
     * // Count the number of UserInfos
     * const count = await prisma.userInfo.count({
     *   where: {
     *     // ... the filter for the UserInfos we want to count
     *   }
     * })
    **/
    count<T extends UserInfoCountArgs>(
      args?: Subset<T, UserInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInfoAggregateArgs>(args: Subset<T, UserInfoAggregateArgs>): Prisma.PrismaPromise<GetUserInfoAggregateType<T>>

    /**
     * Group by UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInfoGroupByArgs['orderBy'] }
        : { orderBy?: UserInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInfo model
   */
  readonly fields: UserInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserInfo$userArgs<ExtArgs> = {}>(args?: Subset<T, UserInfo$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserInfo model
   */ 
  interface UserInfoFieldRefs {
    readonly id: FieldRef<"UserInfo", 'Int'>
    readonly userId: FieldRef<"UserInfo", 'Int'>
    readonly firstName: FieldRef<"UserInfo", 'String'>
    readonly lastName: FieldRef<"UserInfo", 'String'>
    readonly birthdate: FieldRef<"UserInfo", 'String'>
    readonly phone: FieldRef<"UserInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserInfo findUnique
   */
  export type UserInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo findUniqueOrThrow
   */
  export type UserInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo findFirst
   */
  export type UserInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo findFirstOrThrow
   */
  export type UserInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo findMany
   */
  export type UserInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfos to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo create
   */
  export type UserInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInfo.
     */
    data: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
  }

  /**
   * UserInfo createMany
   */
  export type UserInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInfos.
     */
    data: UserInfoCreateManyInput | UserInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInfo update
   */
  export type UserInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInfo.
     */
    data: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
    /**
     * Choose, which UserInfo to update.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo updateMany
   */
  export type UserInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInfos.
     */
    data: XOR<UserInfoUpdateManyMutationInput, UserInfoUncheckedUpdateManyInput>
    /**
     * Filter which UserInfos to update
     */
    where?: UserInfoWhereInput
  }

  /**
   * UserInfo upsert
   */
  export type UserInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInfo to update in case it exists.
     */
    where: UserInfoWhereUniqueInput
    /**
     * In case the UserInfo found by the `where` argument doesn't exist, create a new UserInfo with this data.
     */
    create: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
    /**
     * In case the UserInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
  }

  /**
   * UserInfo delete
   */
  export type UserInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter which UserInfo to delete.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo deleteMany
   */
  export type UserInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfos to delete
     */
    where?: UserInfoWhereInput
  }

  /**
   * UserInfo.user
   */
  export type UserInfo$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserInfo without action
   */
  export type UserInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMethod
   */

  export type AggregatePaymentMethod = {
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  export type PaymentMethodAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PaymentMethodSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PaymentMethodMinAggregateOutputType = {
    id: number | null
    userId: number | null
    cardNumber: string | null
    cardHolder: string | null
    cardDate: string | null
    cvv: string | null
  }

  export type PaymentMethodMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    cardNumber: string | null
    cardHolder: string | null
    cardDate: string | null
    cvv: string | null
  }

  export type PaymentMethodCountAggregateOutputType = {
    id: number
    userId: number
    cardNumber: number
    cardHolder: number
    cardDate: number
    cvv: number
    _all: number
  }


  export type PaymentMethodAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PaymentMethodSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PaymentMethodMinAggregateInputType = {
    id?: true
    userId?: true
    cardNumber?: true
    cardHolder?: true
    cardDate?: true
    cvv?: true
  }

  export type PaymentMethodMaxAggregateInputType = {
    id?: true
    userId?: true
    cardNumber?: true
    cardHolder?: true
    cardDate?: true
    cvv?: true
  }

  export type PaymentMethodCountAggregateInputType = {
    id?: true
    userId?: true
    cardNumber?: true
    cardHolder?: true
    cardDate?: true
    cvv?: true
    _all?: true
  }

  export type PaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethod to aggregate.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMethods
    **/
    _count?: true | PaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentMethodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentMethodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type GetPaymentMethodAggregateType<T extends PaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMethod[P]>
      : GetScalarType<T[P], AggregatePaymentMethod[P]>
  }




  export type PaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithAggregationInput | PaymentMethodOrderByWithAggregationInput[]
    by: PaymentMethodScalarFieldEnum[] | PaymentMethodScalarFieldEnum
    having?: PaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMethodCountAggregateInputType | true
    _avg?: PaymentMethodAvgAggregateInputType
    _sum?: PaymentMethodSumAggregateInputType
    _min?: PaymentMethodMinAggregateInputType
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type PaymentMethodGroupByOutputType = {
    id: number
    userId: number
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cardNumber?: boolean
    cardHolder?: boolean
    cardDate?: boolean
    cvv?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>

  export type PaymentMethodSelectScalar = {
    id?: boolean
    userId?: boolean
    cardNumber?: boolean
    cardHolder?: boolean
    cardDate?: boolean
    cvv?: boolean
  }


  export type PaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $PaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMethod"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      cardNumber: string
      cardHolder: string
      cardDate: string
      cvv: string
    }, ExtArgs["result"]["paymentMethod"]>
    composites: {}
  }


  type PaymentMethodGetPayload<S extends boolean | null | undefined | PaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$PaymentMethodPayload, S>

  type PaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentMethodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentMethodCountAggregateInputType | true
    }

  export interface PaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethod'], meta: { name: 'PaymentMethod' } }
    /**
     * Find zero or one PaymentMethod that matches the filter.
     * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentMethodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PaymentMethod that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentMethodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany()
     * 
     * // Get first 10 PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentMethodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PaymentMethod.
     * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
     * @example
     * // Create one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.create({
     *   data: {
     *     // ... data to create a PaymentMethod
     *   }
     * })
     * 
    **/
    create<T extends PaymentMethodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PaymentMethods.
     *     @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
     *     @example
     *     // Create many PaymentMethods
     *     const paymentMethod = await prisma.paymentMethod.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentMethodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentMethod.
     * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
     * @example
     * // Delete one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.delete({
     *   where: {
     *     // ... filter to delete one PaymentMethod
     *   }
     * })
     * 
    **/
    delete<T extends PaymentMethodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PaymentMethod.
     * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
     * @example
     * // Update one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentMethodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PaymentMethods.
     * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
     * @example
     * // Delete a few PaymentMethods
     * const { count } = await prisma.paymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentMethodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentMethodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentMethod.
     * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
     * @example
     * // Update or create a PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.upsert({
     *   create: {
     *     // ... data to create a PaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMethod we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentMethodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>
    ): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
     * @example
     * // Count the number of PaymentMethods
     * const count = await prisma.paymentMethod.count({
     *   where: {
     *     // ... the filter for the PaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends PaymentMethodCountArgs>(
      args?: Subset<T, PaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMethodAggregateArgs>(args: Subset<T, PaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>

    /**
     * Group by PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMethod model
   */
  readonly fields: PaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PaymentMethod model
   */ 
  interface PaymentMethodFieldRefs {
    readonly id: FieldRef<"PaymentMethod", 'Int'>
    readonly userId: FieldRef<"PaymentMethod", 'Int'>
    readonly cardNumber: FieldRef<"PaymentMethod", 'String'>
    readonly cardHolder: FieldRef<"PaymentMethod", 'String'>
    readonly cardDate: FieldRef<"PaymentMethod", 'String'>
    readonly cvv: FieldRef<"PaymentMethod", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMethod findUnique
   */
  export type PaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findUniqueOrThrow
   */
  export type PaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findFirst
   */
  export type PaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findFirstOrThrow
   */
  export type PaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findMany
   */
  export type PaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethods to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod create
   */
  export type PaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMethod.
     */
    data: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
  }

  /**
   * PaymentMethod createMany
   */
  export type PaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentMethod update
   */
  export type PaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMethod.
     */
    data: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which PaymentMethod to update.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod updateMany
   */
  export type PaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput
  }

  /**
   * PaymentMethod upsert
   */
  export type PaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMethod to update in case it exists.
     */
    where: PaymentMethodWhereUniqueInput
    /**
     * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
     */
    create: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
    /**
     * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
  }

  /**
   * PaymentMethod delete
   */
  export type PaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which PaymentMethod to delete.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod deleteMany
   */
  export type PaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethods to delete
     */
    where?: PaymentMethodWhereInput
  }

  /**
   * PaymentMethod without action
   */
  export type PaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
  }


  /**
   * Model LangCourses
   */

  export type AggregateLangCourses = {
    _count: LangCoursesCountAggregateOutputType | null
    _avg: LangCoursesAvgAggregateOutputType | null
    _sum: LangCoursesSumAggregateOutputType | null
    _min: LangCoursesMinAggregateOutputType | null
    _max: LangCoursesMaxAggregateOutputType | null
  }

  export type LangCoursesAvgAggregateOutputType = {
    id: number | null
  }

  export type LangCoursesSumAggregateOutputType = {
    id: number | null
  }

  export type LangCoursesMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: string | null
    amountOfLessons: string | null
    timeForLesson: string | null
    timeForAllCourse: string | null
    imgURL: string | null
    lang: $Enums.Langs | null
    format: $Enums.CoursesFormats | null
  }

  export type LangCoursesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: string | null
    amountOfLessons: string | null
    timeForLesson: string | null
    timeForAllCourse: string | null
    imgURL: string | null
    lang: $Enums.Langs | null
    format: $Enums.CoursesFormats | null
  }

  export type LangCoursesCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    amountOfLessons: number
    timeForLesson: number
    timeForAllCourse: number
    imgURL: number
    lang: number
    format: number
    _all: number
  }


  export type LangCoursesAvgAggregateInputType = {
    id?: true
  }

  export type LangCoursesSumAggregateInputType = {
    id?: true
  }

  export type LangCoursesMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    amountOfLessons?: true
    timeForLesson?: true
    timeForAllCourse?: true
    imgURL?: true
    lang?: true
    format?: true
  }

  export type LangCoursesMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    amountOfLessons?: true
    timeForLesson?: true
    timeForAllCourse?: true
    imgURL?: true
    lang?: true
    format?: true
  }

  export type LangCoursesCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    amountOfLessons?: true
    timeForLesson?: true
    timeForAllCourse?: true
    imgURL?: true
    lang?: true
    format?: true
    _all?: true
  }

  export type LangCoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LangCourses to aggregate.
     */
    where?: LangCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangCourses to fetch.
     */
    orderBy?: LangCoursesOrderByWithRelationInput | LangCoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LangCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LangCourses
    **/
    _count?: true | LangCoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LangCoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LangCoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LangCoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LangCoursesMaxAggregateInputType
  }

  export type GetLangCoursesAggregateType<T extends LangCoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateLangCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLangCourses[P]>
      : GetScalarType<T[P], AggregateLangCourses[P]>
  }




  export type LangCoursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LangCoursesWhereInput
    orderBy?: LangCoursesOrderByWithAggregationInput | LangCoursesOrderByWithAggregationInput[]
    by: LangCoursesScalarFieldEnum[] | LangCoursesScalarFieldEnum
    having?: LangCoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LangCoursesCountAggregateInputType | true
    _avg?: LangCoursesAvgAggregateInputType
    _sum?: LangCoursesSumAggregateInputType
    _min?: LangCoursesMinAggregateInputType
    _max?: LangCoursesMaxAggregateInputType
  }

  export type LangCoursesGroupByOutputType = {
    id: number
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    _count: LangCoursesCountAggregateOutputType | null
    _avg: LangCoursesAvgAggregateOutputType | null
    _sum: LangCoursesSumAggregateOutputType | null
    _min: LangCoursesMinAggregateOutputType | null
    _max: LangCoursesMaxAggregateOutputType | null
  }

  type GetLangCoursesGroupByPayload<T extends LangCoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LangCoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LangCoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LangCoursesGroupByOutputType[P]>
            : GetScalarType<T[P], LangCoursesGroupByOutputType[P]>
        }
      >
    >


  export type LangCoursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    amountOfLessons?: boolean
    timeForLesson?: boolean
    timeForAllCourse?: boolean
    imgURL?: boolean
    lang?: boolean
    format?: boolean
    users?: boolean | LangCourses$usersArgs<ExtArgs>
    buyed?: boolean | LangCourses$buyedArgs<ExtArgs>
    _count?: boolean | LangCoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["langCourses"]>

  export type LangCoursesSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    amountOfLessons?: boolean
    timeForLesson?: boolean
    timeForAllCourse?: boolean
    imgURL?: boolean
    lang?: boolean
    format?: boolean
  }


  export type LangCoursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | LangCourses$usersArgs<ExtArgs>
    buyed?: boolean | LangCourses$buyedArgs<ExtArgs>
    _count?: boolean | LangCoursesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LangCoursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LangCourses"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      buyed: Prisma.$BuyedCousePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      price: string
      amountOfLessons: string
      timeForLesson: string
      timeForAllCourse: string
      imgURL: string
      lang: $Enums.Langs
      format: $Enums.CoursesFormats
    }, ExtArgs["result"]["langCourses"]>
    composites: {}
  }


  type LangCoursesGetPayload<S extends boolean | null | undefined | LangCoursesDefaultArgs> = $Result.GetResult<Prisma.$LangCoursesPayload, S>

  type LangCoursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LangCoursesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LangCoursesCountAggregateInputType | true
    }

  export interface LangCoursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LangCourses'], meta: { name: 'LangCourses' } }
    /**
     * Find zero or one LangCourses that matches the filter.
     * @param {LangCoursesFindUniqueArgs} args - Arguments to find a LangCourses
     * @example
     * // Get one LangCourses
     * const langCourses = await prisma.langCourses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LangCoursesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesFindUniqueArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LangCourses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LangCoursesFindUniqueOrThrowArgs} args - Arguments to find a LangCourses
     * @example
     * // Get one LangCourses
     * const langCourses = await prisma.langCourses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LangCoursesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LangCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesFindFirstArgs} args - Arguments to find a LangCourses
     * @example
     * // Get one LangCourses
     * const langCourses = await prisma.langCourses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LangCoursesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesFindFirstArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LangCourses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesFindFirstOrThrowArgs} args - Arguments to find a LangCourses
     * @example
     * // Get one LangCourses
     * const langCourses = await prisma.langCourses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LangCoursesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LangCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LangCourses
     * const langCourses = await prisma.langCourses.findMany()
     * 
     * // Get first 10 LangCourses
     * const langCourses = await prisma.langCourses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const langCoursesWithIdOnly = await prisma.langCourses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LangCoursesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LangCourses.
     * @param {LangCoursesCreateArgs} args - Arguments to create a LangCourses.
     * @example
     * // Create one LangCourses
     * const LangCourses = await prisma.langCourses.create({
     *   data: {
     *     // ... data to create a LangCourses
     *   }
     * })
     * 
    **/
    create<T extends LangCoursesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesCreateArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LangCourses.
     *     @param {LangCoursesCreateManyArgs} args - Arguments to create many LangCourses.
     *     @example
     *     // Create many LangCourses
     *     const langCourses = await prisma.langCourses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LangCoursesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LangCourses.
     * @param {LangCoursesDeleteArgs} args - Arguments to delete one LangCourses.
     * @example
     * // Delete one LangCourses
     * const LangCourses = await prisma.langCourses.delete({
     *   where: {
     *     // ... filter to delete one LangCourses
     *   }
     * })
     * 
    **/
    delete<T extends LangCoursesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesDeleteArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LangCourses.
     * @param {LangCoursesUpdateArgs} args - Arguments to update one LangCourses.
     * @example
     * // Update one LangCourses
     * const langCourses = await prisma.langCourses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LangCoursesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesUpdateArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LangCourses.
     * @param {LangCoursesDeleteManyArgs} args - Arguments to filter LangCourses to delete.
     * @example
     * // Delete a few LangCourses
     * const { count } = await prisma.langCourses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LangCoursesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LangCoursesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LangCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LangCourses
     * const langCourses = await prisma.langCourses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LangCoursesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LangCourses.
     * @param {LangCoursesUpsertArgs} args - Arguments to update or create a LangCourses.
     * @example
     * // Update or create a LangCourses
     * const langCourses = await prisma.langCourses.upsert({
     *   create: {
     *     // ... data to create a LangCourses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LangCourses we want to update
     *   }
     * })
    **/
    upsert<T extends LangCoursesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LangCoursesUpsertArgs<ExtArgs>>
    ): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LangCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesCountArgs} args - Arguments to filter LangCourses to count.
     * @example
     * // Count the number of LangCourses
     * const count = await prisma.langCourses.count({
     *   where: {
     *     // ... the filter for the LangCourses we want to count
     *   }
     * })
    **/
    count<T extends LangCoursesCountArgs>(
      args?: Subset<T, LangCoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LangCoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LangCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LangCoursesAggregateArgs>(args: Subset<T, LangCoursesAggregateArgs>): Prisma.PrismaPromise<GetLangCoursesAggregateType<T>>

    /**
     * Group by LangCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangCoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LangCoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LangCoursesGroupByArgs['orderBy'] }
        : { orderBy?: LangCoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LangCoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLangCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LangCourses model
   */
  readonly fields: LangCoursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LangCourses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LangCoursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends LangCourses$usersArgs<ExtArgs> = {}>(args?: Subset<T, LangCourses$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    buyed<T extends LangCourses$buyedArgs<ExtArgs> = {}>(args?: Subset<T, LangCourses$buyedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LangCourses model
   */ 
  interface LangCoursesFieldRefs {
    readonly id: FieldRef<"LangCourses", 'Int'>
    readonly title: FieldRef<"LangCourses", 'String'>
    readonly description: FieldRef<"LangCourses", 'String'>
    readonly price: FieldRef<"LangCourses", 'String'>
    readonly amountOfLessons: FieldRef<"LangCourses", 'String'>
    readonly timeForLesson: FieldRef<"LangCourses", 'String'>
    readonly timeForAllCourse: FieldRef<"LangCourses", 'String'>
    readonly imgURL: FieldRef<"LangCourses", 'String'>
    readonly lang: FieldRef<"LangCourses", 'Langs'>
    readonly format: FieldRef<"LangCourses", 'CoursesFormats'>
  }
    

  // Custom InputTypes
  /**
   * LangCourses findUnique
   */
  export type LangCoursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter, which LangCourses to fetch.
     */
    where: LangCoursesWhereUniqueInput
  }

  /**
   * LangCourses findUniqueOrThrow
   */
  export type LangCoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter, which LangCourses to fetch.
     */
    where: LangCoursesWhereUniqueInput
  }

  /**
   * LangCourses findFirst
   */
  export type LangCoursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter, which LangCourses to fetch.
     */
    where?: LangCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangCourses to fetch.
     */
    orderBy?: LangCoursesOrderByWithRelationInput | LangCoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LangCourses.
     */
    cursor?: LangCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LangCourses.
     */
    distinct?: LangCoursesScalarFieldEnum | LangCoursesScalarFieldEnum[]
  }

  /**
   * LangCourses findFirstOrThrow
   */
  export type LangCoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter, which LangCourses to fetch.
     */
    where?: LangCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangCourses to fetch.
     */
    orderBy?: LangCoursesOrderByWithRelationInput | LangCoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LangCourses.
     */
    cursor?: LangCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LangCourses.
     */
    distinct?: LangCoursesScalarFieldEnum | LangCoursesScalarFieldEnum[]
  }

  /**
   * LangCourses findMany
   */
  export type LangCoursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter, which LangCourses to fetch.
     */
    where?: LangCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangCourses to fetch.
     */
    orderBy?: LangCoursesOrderByWithRelationInput | LangCoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LangCourses.
     */
    cursor?: LangCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangCourses.
     */
    skip?: number
    distinct?: LangCoursesScalarFieldEnum | LangCoursesScalarFieldEnum[]
  }

  /**
   * LangCourses create
   */
  export type LangCoursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a LangCourses.
     */
    data: XOR<LangCoursesCreateInput, LangCoursesUncheckedCreateInput>
  }

  /**
   * LangCourses createMany
   */
  export type LangCoursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LangCourses.
     */
    data: LangCoursesCreateManyInput | LangCoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LangCourses update
   */
  export type LangCoursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a LangCourses.
     */
    data: XOR<LangCoursesUpdateInput, LangCoursesUncheckedUpdateInput>
    /**
     * Choose, which LangCourses to update.
     */
    where: LangCoursesWhereUniqueInput
  }

  /**
   * LangCourses updateMany
   */
  export type LangCoursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LangCourses.
     */
    data: XOR<LangCoursesUpdateManyMutationInput, LangCoursesUncheckedUpdateManyInput>
    /**
     * Filter which LangCourses to update
     */
    where?: LangCoursesWhereInput
  }

  /**
   * LangCourses upsert
   */
  export type LangCoursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the LangCourses to update in case it exists.
     */
    where: LangCoursesWhereUniqueInput
    /**
     * In case the LangCourses found by the `where` argument doesn't exist, create a new LangCourses with this data.
     */
    create: XOR<LangCoursesCreateInput, LangCoursesUncheckedCreateInput>
    /**
     * In case the LangCourses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LangCoursesUpdateInput, LangCoursesUncheckedUpdateInput>
  }

  /**
   * LangCourses delete
   */
  export type LangCoursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    /**
     * Filter which LangCourses to delete.
     */
    where: LangCoursesWhereUniqueInput
  }

  /**
   * LangCourses deleteMany
   */
  export type LangCoursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LangCourses to delete
     */
    where?: LangCoursesWhereInput
  }

  /**
   * LangCourses.users
   */
  export type LangCourses$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * LangCourses.buyed
   */
  export type LangCourses$buyedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    where?: BuyedCouseWhereInput
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    cursor?: BuyedCouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyedCouseScalarFieldEnum | BuyedCouseScalarFieldEnum[]
  }

  /**
   * LangCourses without action
   */
  export type LangCoursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
  }


  /**
   * Model BuyedCouse
   */

  export type AggregateBuyedCouse = {
    _count: BuyedCouseCountAggregateOutputType | null
    _avg: BuyedCouseAvgAggregateOutputType | null
    _sum: BuyedCouseSumAggregateOutputType | null
    _min: BuyedCouseMinAggregateOutputType | null
    _max: BuyedCouseMaxAggregateOutputType | null
  }

  export type BuyedCouseAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    courseId: number | null
  }

  export type BuyedCouseSumAggregateOutputType = {
    id: number | null
    userId: number | null
    courseId: number | null
  }

  export type BuyedCouseMinAggregateOutputType = {
    id: number | null
    userId: number | null
    courseId: number | null
  }

  export type BuyedCouseMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    courseId: number | null
  }

  export type BuyedCouseCountAggregateOutputType = {
    id: number
    userId: number
    courseId: number
    _all: number
  }


  export type BuyedCouseAvgAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
  }

  export type BuyedCouseSumAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
  }

  export type BuyedCouseMinAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
  }

  export type BuyedCouseMaxAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
  }

  export type BuyedCouseCountAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    _all?: true
  }

  export type BuyedCouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyedCouse to aggregate.
     */
    where?: BuyedCouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyedCouses to fetch.
     */
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyedCouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyedCouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyedCouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuyedCouses
    **/
    _count?: true | BuyedCouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyedCouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyedCouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyedCouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyedCouseMaxAggregateInputType
  }

  export type GetBuyedCouseAggregateType<T extends BuyedCouseAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyedCouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyedCouse[P]>
      : GetScalarType<T[P], AggregateBuyedCouse[P]>
  }




  export type BuyedCouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyedCouseWhereInput
    orderBy?: BuyedCouseOrderByWithAggregationInput | BuyedCouseOrderByWithAggregationInput[]
    by: BuyedCouseScalarFieldEnum[] | BuyedCouseScalarFieldEnum
    having?: BuyedCouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyedCouseCountAggregateInputType | true
    _avg?: BuyedCouseAvgAggregateInputType
    _sum?: BuyedCouseSumAggregateInputType
    _min?: BuyedCouseMinAggregateInputType
    _max?: BuyedCouseMaxAggregateInputType
  }

  export type BuyedCouseGroupByOutputType = {
    id: number
    userId: number
    courseId: number
    _count: BuyedCouseCountAggregateOutputType | null
    _avg: BuyedCouseAvgAggregateOutputType | null
    _sum: BuyedCouseSumAggregateOutputType | null
    _min: BuyedCouseMinAggregateOutputType | null
    _max: BuyedCouseMaxAggregateOutputType | null
  }

  type GetBuyedCouseGroupByPayload<T extends BuyedCouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyedCouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyedCouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyedCouseGroupByOutputType[P]>
            : GetScalarType<T[P], BuyedCouseGroupByOutputType[P]>
        }
      >
    >


  export type BuyedCouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    user?: boolean | BuyedCouse$userArgs<ExtArgs>
    course?: boolean | BuyedCouse$courseArgs<ExtArgs>
  }, ExtArgs["result"]["buyedCouse"]>

  export type BuyedCouseSelectScalar = {
    id?: boolean
    userId?: boolean
    courseId?: boolean
  }


  export type BuyedCouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | BuyedCouse$userArgs<ExtArgs>
    course?: boolean | BuyedCouse$courseArgs<ExtArgs>
  }


  export type $BuyedCousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuyedCouse"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      course: Prisma.$LangCoursesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      courseId: number
    }, ExtArgs["result"]["buyedCouse"]>
    composites: {}
  }


  type BuyedCouseGetPayload<S extends boolean | null | undefined | BuyedCouseDefaultArgs> = $Result.GetResult<Prisma.$BuyedCousePayload, S>

  type BuyedCouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuyedCouseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuyedCouseCountAggregateInputType | true
    }

  export interface BuyedCouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuyedCouse'], meta: { name: 'BuyedCouse' } }
    /**
     * Find zero or one BuyedCouse that matches the filter.
     * @param {BuyedCouseFindUniqueArgs} args - Arguments to find a BuyedCouse
     * @example
     * // Get one BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BuyedCouseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseFindUniqueArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BuyedCouse that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BuyedCouseFindUniqueOrThrowArgs} args - Arguments to find a BuyedCouse
     * @example
     * // Get one BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BuyedCouseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BuyedCouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseFindFirstArgs} args - Arguments to find a BuyedCouse
     * @example
     * // Get one BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BuyedCouseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseFindFirstArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BuyedCouse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseFindFirstOrThrowArgs} args - Arguments to find a BuyedCouse
     * @example
     * // Get one BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BuyedCouseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BuyedCouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuyedCouses
     * const buyedCouses = await prisma.buyedCouse.findMany()
     * 
     * // Get first 10 BuyedCouses
     * const buyedCouses = await prisma.buyedCouse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyedCouseWithIdOnly = await prisma.buyedCouse.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BuyedCouseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BuyedCouse.
     * @param {BuyedCouseCreateArgs} args - Arguments to create a BuyedCouse.
     * @example
     * // Create one BuyedCouse
     * const BuyedCouse = await prisma.buyedCouse.create({
     *   data: {
     *     // ... data to create a BuyedCouse
     *   }
     * })
     * 
    **/
    create<T extends BuyedCouseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseCreateArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BuyedCouses.
     *     @param {BuyedCouseCreateManyArgs} args - Arguments to create many BuyedCouses.
     *     @example
     *     // Create many BuyedCouses
     *     const buyedCouse = await prisma.buyedCouse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BuyedCouseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BuyedCouse.
     * @param {BuyedCouseDeleteArgs} args - Arguments to delete one BuyedCouse.
     * @example
     * // Delete one BuyedCouse
     * const BuyedCouse = await prisma.buyedCouse.delete({
     *   where: {
     *     // ... filter to delete one BuyedCouse
     *   }
     * })
     * 
    **/
    delete<T extends BuyedCouseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseDeleteArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BuyedCouse.
     * @param {BuyedCouseUpdateArgs} args - Arguments to update one BuyedCouse.
     * @example
     * // Update one BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BuyedCouseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseUpdateArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BuyedCouses.
     * @param {BuyedCouseDeleteManyArgs} args - Arguments to filter BuyedCouses to delete.
     * @example
     * // Delete a few BuyedCouses
     * const { count } = await prisma.buyedCouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BuyedCouseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyedCouseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyedCouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuyedCouses
     * const buyedCouse = await prisma.buyedCouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BuyedCouseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BuyedCouse.
     * @param {BuyedCouseUpsertArgs} args - Arguments to update or create a BuyedCouse.
     * @example
     * // Update or create a BuyedCouse
     * const buyedCouse = await prisma.buyedCouse.upsert({
     *   create: {
     *     // ... data to create a BuyedCouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuyedCouse we want to update
     *   }
     * })
    **/
    upsert<T extends BuyedCouseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BuyedCouseUpsertArgs<ExtArgs>>
    ): Prisma__BuyedCouseClient<$Result.GetResult<Prisma.$BuyedCousePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BuyedCouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseCountArgs} args - Arguments to filter BuyedCouses to count.
     * @example
     * // Count the number of BuyedCouses
     * const count = await prisma.buyedCouse.count({
     *   where: {
     *     // ... the filter for the BuyedCouses we want to count
     *   }
     * })
    **/
    count<T extends BuyedCouseCountArgs>(
      args?: Subset<T, BuyedCouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyedCouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuyedCouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyedCouseAggregateArgs>(args: Subset<T, BuyedCouseAggregateArgs>): Prisma.PrismaPromise<GetBuyedCouseAggregateType<T>>

    /**
     * Group by BuyedCouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyedCouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyedCouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyedCouseGroupByArgs['orderBy'] }
        : { orderBy?: BuyedCouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyedCouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyedCouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuyedCouse model
   */
  readonly fields: BuyedCouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuyedCouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyedCouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends BuyedCouse$userArgs<ExtArgs> = {}>(args?: Subset<T, BuyedCouse$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    course<T extends BuyedCouse$courseArgs<ExtArgs> = {}>(args?: Subset<T, BuyedCouse$courseArgs<ExtArgs>>): Prisma__LangCoursesClient<$Result.GetResult<Prisma.$LangCoursesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BuyedCouse model
   */ 
  interface BuyedCouseFieldRefs {
    readonly id: FieldRef<"BuyedCouse", 'Int'>
    readonly userId: FieldRef<"BuyedCouse", 'Int'>
    readonly courseId: FieldRef<"BuyedCouse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BuyedCouse findUnique
   */
  export type BuyedCouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter, which BuyedCouse to fetch.
     */
    where: BuyedCouseWhereUniqueInput
  }

  /**
   * BuyedCouse findUniqueOrThrow
   */
  export type BuyedCouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter, which BuyedCouse to fetch.
     */
    where: BuyedCouseWhereUniqueInput
  }

  /**
   * BuyedCouse findFirst
   */
  export type BuyedCouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter, which BuyedCouse to fetch.
     */
    where?: BuyedCouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyedCouses to fetch.
     */
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyedCouses.
     */
    cursor?: BuyedCouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyedCouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyedCouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyedCouses.
     */
    distinct?: BuyedCouseScalarFieldEnum | BuyedCouseScalarFieldEnum[]
  }

  /**
   * BuyedCouse findFirstOrThrow
   */
  export type BuyedCouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter, which BuyedCouse to fetch.
     */
    where?: BuyedCouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyedCouses to fetch.
     */
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyedCouses.
     */
    cursor?: BuyedCouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyedCouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyedCouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyedCouses.
     */
    distinct?: BuyedCouseScalarFieldEnum | BuyedCouseScalarFieldEnum[]
  }

  /**
   * BuyedCouse findMany
   */
  export type BuyedCouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter, which BuyedCouses to fetch.
     */
    where?: BuyedCouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyedCouses to fetch.
     */
    orderBy?: BuyedCouseOrderByWithRelationInput | BuyedCouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuyedCouses.
     */
    cursor?: BuyedCouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyedCouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyedCouses.
     */
    skip?: number
    distinct?: BuyedCouseScalarFieldEnum | BuyedCouseScalarFieldEnum[]
  }

  /**
   * BuyedCouse create
   */
  export type BuyedCouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * The data needed to create a BuyedCouse.
     */
    data: XOR<BuyedCouseCreateInput, BuyedCouseUncheckedCreateInput>
  }

  /**
   * BuyedCouse createMany
   */
  export type BuyedCouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuyedCouses.
     */
    data: BuyedCouseCreateManyInput | BuyedCouseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuyedCouse update
   */
  export type BuyedCouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * The data needed to update a BuyedCouse.
     */
    data: XOR<BuyedCouseUpdateInput, BuyedCouseUncheckedUpdateInput>
    /**
     * Choose, which BuyedCouse to update.
     */
    where: BuyedCouseWhereUniqueInput
  }

  /**
   * BuyedCouse updateMany
   */
  export type BuyedCouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuyedCouses.
     */
    data: XOR<BuyedCouseUpdateManyMutationInput, BuyedCouseUncheckedUpdateManyInput>
    /**
     * Filter which BuyedCouses to update
     */
    where?: BuyedCouseWhereInput
  }

  /**
   * BuyedCouse upsert
   */
  export type BuyedCouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * The filter to search for the BuyedCouse to update in case it exists.
     */
    where: BuyedCouseWhereUniqueInput
    /**
     * In case the BuyedCouse found by the `where` argument doesn't exist, create a new BuyedCouse with this data.
     */
    create: XOR<BuyedCouseCreateInput, BuyedCouseUncheckedCreateInput>
    /**
     * In case the BuyedCouse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyedCouseUpdateInput, BuyedCouseUncheckedUpdateInput>
  }

  /**
   * BuyedCouse delete
   */
  export type BuyedCouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
    /**
     * Filter which BuyedCouse to delete.
     */
    where: BuyedCouseWhereUniqueInput
  }

  /**
   * BuyedCouse deleteMany
   */
  export type BuyedCouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyedCouses to delete
     */
    where?: BuyedCouseWhereInput
  }

  /**
   * BuyedCouse.user
   */
  export type BuyedCouse$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BuyedCouse.course
   */
  export type BuyedCouse$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangCourses
     */
    select?: LangCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangCoursesInclude<ExtArgs> | null
    where?: LangCoursesWhereInput
  }

  /**
   * BuyedCouse without action
   */
  export type BuyedCouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyedCouse
     */
    select?: BuyedCouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyedCouseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    login: 'login',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    refresh_token: 'refresh_token',
    createdAt: 'createdAt'
  };

  export type UserSessionsScalarFieldEnum = (typeof UserSessionsScalarFieldEnum)[keyof typeof UserSessionsScalarFieldEnum]


  export const UserInfoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    birthdate: 'birthdate',
    phone: 'phone'
  };

  export type UserInfoScalarFieldEnum = (typeof UserInfoScalarFieldEnum)[keyof typeof UserInfoScalarFieldEnum]


  export const PaymentMethodScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    cardNumber: 'cardNumber',
    cardHolder: 'cardHolder',
    cardDate: 'cardDate',
    cvv: 'cvv'
  };

  export type PaymentMethodScalarFieldEnum = (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum]


  export const LangCoursesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    amountOfLessons: 'amountOfLessons',
    timeForLesson: 'timeForLesson',
    timeForAllCourse: 'timeForAllCourse',
    imgURL: 'imgURL',
    lang: 'lang',
    format: 'format'
  };

  export type LangCoursesScalarFieldEnum = (typeof LangCoursesScalarFieldEnum)[keyof typeof LangCoursesScalarFieldEnum]


  export const BuyedCouseScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    courseId: 'courseId'
  };

  export type BuyedCouseScalarFieldEnum = (typeof BuyedCouseScalarFieldEnum)[keyof typeof BuyedCouseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Roles'
   */
  export type EnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles'>
    


  /**
   * Reference to a field of type 'Roles[]'
   */
  export type ListEnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles[]'>
    


  /**
   * Reference to a field of type 'Langs'
   */
  export type EnumLangsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Langs'>
    


  /**
   * Reference to a field of type 'Langs[]'
   */
  export type ListEnumLangsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Langs[]'>
    


  /**
   * Reference to a field of type 'CoursesFormats'
   */
  export type EnumCoursesFormatsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoursesFormats'>
    


  /**
   * Reference to a field of type 'CoursesFormats[]'
   */
  export type ListEnumCoursesFormatsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoursesFormats[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    login?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRolesFilter<"User"> | $Enums.Roles
    userSessions?: UserSessionsListRelationFilter
    userInfo?: XOR<UserInfoNullableRelationFilter, UserInfoWhereInput> | null
    langCourses?: LangCoursesListRelationFilter
    payment?: XOR<PaymentMethodNullableRelationFilter, PaymentMethodWhereInput> | null
    buyed?: BuyedCouseListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    login?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    userSessions?: UserSessionsOrderByRelationAggregateInput
    userInfo?: UserInfoOrderByWithRelationInput
    langCourses?: LangCoursesOrderByRelationAggregateInput
    payment?: PaymentMethodOrderByWithRelationInput
    buyed?: BuyedCouseOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    login?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRolesFilter<"User"> | $Enums.Roles
    userSessions?: UserSessionsListRelationFilter
    userInfo?: XOR<UserInfoNullableRelationFilter, UserInfoWhereInput> | null
    langCourses?: LangCoursesListRelationFilter
    payment?: XOR<PaymentMethodNullableRelationFilter, PaymentMethodWhereInput> | null
    buyed?: BuyedCouseListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    login?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    login?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRolesWithAggregatesFilter<"User"> | $Enums.Roles
  }

  export type UserSessionsWhereInput = {
    AND?: UserSessionsWhereInput | UserSessionsWhereInput[]
    OR?: UserSessionsWhereInput[]
    NOT?: UserSessionsWhereInput | UserSessionsWhereInput[]
    id?: IntFilter<"UserSessions"> | number
    userId?: IntFilter<"UserSessions"> | number
    refresh_token?: StringFilter<"UserSessions"> | string
    createdAt?: DateTimeFilter<"UserSessions"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSessionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    refresh_token?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserSessionsWhereInput | UserSessionsWhereInput[]
    OR?: UserSessionsWhereInput[]
    NOT?: UserSessionsWhereInput | UserSessionsWhereInput[]
    userId?: IntFilter<"UserSessions"> | number
    refresh_token?: StringFilter<"UserSessions"> | string
    createdAt?: DateTimeFilter<"UserSessions"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserSessionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    refresh_token?: SortOrder
    createdAt?: SortOrder
    _count?: UserSessionsCountOrderByAggregateInput
    _avg?: UserSessionsAvgOrderByAggregateInput
    _max?: UserSessionsMaxOrderByAggregateInput
    _min?: UserSessionsMinOrderByAggregateInput
    _sum?: UserSessionsSumOrderByAggregateInput
  }

  export type UserSessionsScalarWhereWithAggregatesInput = {
    AND?: UserSessionsScalarWhereWithAggregatesInput | UserSessionsScalarWhereWithAggregatesInput[]
    OR?: UserSessionsScalarWhereWithAggregatesInput[]
    NOT?: UserSessionsScalarWhereWithAggregatesInput | UserSessionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserSessions"> | number
    userId?: IntWithAggregatesFilter<"UserSessions"> | number
    refresh_token?: StringWithAggregatesFilter<"UserSessions"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSessions"> | Date | string
  }

  export type UserInfoWhereInput = {
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    id?: IntFilter<"UserInfo"> | number
    userId?: IntFilter<"UserInfo"> | number
    firstName?: StringFilter<"UserInfo"> | string
    lastName?: StringFilter<"UserInfo"> | string
    birthdate?: StringFilter<"UserInfo"> | string
    phone?: StringFilter<"UserInfo"> | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type UserInfoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthdate?: SortOrder
    phone?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    firstName?: StringFilter<"UserInfo"> | string
    lastName?: StringFilter<"UserInfo"> | string
    birthdate?: StringFilter<"UserInfo"> | string
    phone?: StringFilter<"UserInfo"> | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "userId">

  export type UserInfoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthdate?: SortOrder
    phone?: SortOrder
    _count?: UserInfoCountOrderByAggregateInput
    _avg?: UserInfoAvgOrderByAggregateInput
    _max?: UserInfoMaxOrderByAggregateInput
    _min?: UserInfoMinOrderByAggregateInput
    _sum?: UserInfoSumOrderByAggregateInput
  }

  export type UserInfoScalarWhereWithAggregatesInput = {
    AND?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    OR?: UserInfoScalarWhereWithAggregatesInput[]
    NOT?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserInfo"> | number
    userId?: IntWithAggregatesFilter<"UserInfo"> | number
    firstName?: StringWithAggregatesFilter<"UserInfo"> | string
    lastName?: StringWithAggregatesFilter<"UserInfo"> | string
    birthdate?: StringWithAggregatesFilter<"UserInfo"> | string
    phone?: StringWithAggregatesFilter<"UserInfo"> | string
  }

  export type PaymentMethodWhereInput = {
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    id?: IntFilter<"PaymentMethod"> | number
    userId?: IntFilter<"PaymentMethod"> | number
    cardNumber?: StringFilter<"PaymentMethod"> | string
    cardHolder?: StringFilter<"PaymentMethod"> | string
    cardDate?: StringFilter<"PaymentMethod"> | string
    cvv?: StringFilter<"PaymentMethod"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PaymentMethodOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardNumber?: SortOrder
    cardHolder?: SortOrder
    cardDate?: SortOrder
    cvv?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    cardNumber?: StringFilter<"PaymentMethod"> | string
    cardHolder?: StringFilter<"PaymentMethod"> | string
    cardDate?: StringFilter<"PaymentMethod"> | string
    cvv?: StringFilter<"PaymentMethod"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type PaymentMethodOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardNumber?: SortOrder
    cardHolder?: SortOrder
    cardDate?: SortOrder
    cvv?: SortOrder
    _count?: PaymentMethodCountOrderByAggregateInput
    _avg?: PaymentMethodAvgOrderByAggregateInput
    _max?: PaymentMethodMaxOrderByAggregateInput
    _min?: PaymentMethodMinOrderByAggregateInput
    _sum?: PaymentMethodSumOrderByAggregateInput
  }

  export type PaymentMethodScalarWhereWithAggregatesInput = {
    AND?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    OR?: PaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentMethod"> | number
    userId?: IntWithAggregatesFilter<"PaymentMethod"> | number
    cardNumber?: StringWithAggregatesFilter<"PaymentMethod"> | string
    cardHolder?: StringWithAggregatesFilter<"PaymentMethod"> | string
    cardDate?: StringWithAggregatesFilter<"PaymentMethod"> | string
    cvv?: StringWithAggregatesFilter<"PaymentMethod"> | string
  }

  export type LangCoursesWhereInput = {
    AND?: LangCoursesWhereInput | LangCoursesWhereInput[]
    OR?: LangCoursesWhereInput[]
    NOT?: LangCoursesWhereInput | LangCoursesWhereInput[]
    id?: IntFilter<"LangCourses"> | number
    title?: StringFilter<"LangCourses"> | string
    description?: StringFilter<"LangCourses"> | string
    price?: StringFilter<"LangCourses"> | string
    amountOfLessons?: StringFilter<"LangCourses"> | string
    timeForLesson?: StringFilter<"LangCourses"> | string
    timeForAllCourse?: StringFilter<"LangCourses"> | string
    imgURL?: StringFilter<"LangCourses"> | string
    lang?: EnumLangsFilter<"LangCourses"> | $Enums.Langs
    format?: EnumCoursesFormatsFilter<"LangCourses"> | $Enums.CoursesFormats
    users?: UserListRelationFilter
    buyed?: BuyedCouseListRelationFilter
  }

  export type LangCoursesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    amountOfLessons?: SortOrder
    timeForLesson?: SortOrder
    timeForAllCourse?: SortOrder
    imgURL?: SortOrder
    lang?: SortOrder
    format?: SortOrder
    users?: UserOrderByRelationAggregateInput
    buyed?: BuyedCouseOrderByRelationAggregateInput
  }

  export type LangCoursesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LangCoursesWhereInput | LangCoursesWhereInput[]
    OR?: LangCoursesWhereInput[]
    NOT?: LangCoursesWhereInput | LangCoursesWhereInput[]
    title?: StringFilter<"LangCourses"> | string
    description?: StringFilter<"LangCourses"> | string
    price?: StringFilter<"LangCourses"> | string
    amountOfLessons?: StringFilter<"LangCourses"> | string
    timeForLesson?: StringFilter<"LangCourses"> | string
    timeForAllCourse?: StringFilter<"LangCourses"> | string
    imgURL?: StringFilter<"LangCourses"> | string
    lang?: EnumLangsFilter<"LangCourses"> | $Enums.Langs
    format?: EnumCoursesFormatsFilter<"LangCourses"> | $Enums.CoursesFormats
    users?: UserListRelationFilter
    buyed?: BuyedCouseListRelationFilter
  }, "id">

  export type LangCoursesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    amountOfLessons?: SortOrder
    timeForLesson?: SortOrder
    timeForAllCourse?: SortOrder
    imgURL?: SortOrder
    lang?: SortOrder
    format?: SortOrder
    _count?: LangCoursesCountOrderByAggregateInput
    _avg?: LangCoursesAvgOrderByAggregateInput
    _max?: LangCoursesMaxOrderByAggregateInput
    _min?: LangCoursesMinOrderByAggregateInput
    _sum?: LangCoursesSumOrderByAggregateInput
  }

  export type LangCoursesScalarWhereWithAggregatesInput = {
    AND?: LangCoursesScalarWhereWithAggregatesInput | LangCoursesScalarWhereWithAggregatesInput[]
    OR?: LangCoursesScalarWhereWithAggregatesInput[]
    NOT?: LangCoursesScalarWhereWithAggregatesInput | LangCoursesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LangCourses"> | number
    title?: StringWithAggregatesFilter<"LangCourses"> | string
    description?: StringWithAggregatesFilter<"LangCourses"> | string
    price?: StringWithAggregatesFilter<"LangCourses"> | string
    amountOfLessons?: StringWithAggregatesFilter<"LangCourses"> | string
    timeForLesson?: StringWithAggregatesFilter<"LangCourses"> | string
    timeForAllCourse?: StringWithAggregatesFilter<"LangCourses"> | string
    imgURL?: StringWithAggregatesFilter<"LangCourses"> | string
    lang?: EnumLangsWithAggregatesFilter<"LangCourses"> | $Enums.Langs
    format?: EnumCoursesFormatsWithAggregatesFilter<"LangCourses"> | $Enums.CoursesFormats
  }

  export type BuyedCouseWhereInput = {
    AND?: BuyedCouseWhereInput | BuyedCouseWhereInput[]
    OR?: BuyedCouseWhereInput[]
    NOT?: BuyedCouseWhereInput | BuyedCouseWhereInput[]
    id?: IntFilter<"BuyedCouse"> | number
    userId?: IntFilter<"BuyedCouse"> | number
    courseId?: IntFilter<"BuyedCouse"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    course?: XOR<LangCoursesNullableRelationFilter, LangCoursesWhereInput> | null
  }

  export type BuyedCouseOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    user?: UserOrderByWithRelationInput
    course?: LangCoursesOrderByWithRelationInput
  }

  export type BuyedCouseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    courseId?: number
    AND?: BuyedCouseWhereInput | BuyedCouseWhereInput[]
    OR?: BuyedCouseWhereInput[]
    NOT?: BuyedCouseWhereInput | BuyedCouseWhereInput[]
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    course?: XOR<LangCoursesNullableRelationFilter, LangCoursesWhereInput> | null
  }, "id" | "userId" | "courseId">

  export type BuyedCouseOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    _count?: BuyedCouseCountOrderByAggregateInput
    _avg?: BuyedCouseAvgOrderByAggregateInput
    _max?: BuyedCouseMaxOrderByAggregateInput
    _min?: BuyedCouseMinOrderByAggregateInput
    _sum?: BuyedCouseSumOrderByAggregateInput
  }

  export type BuyedCouseScalarWhereWithAggregatesInput = {
    AND?: BuyedCouseScalarWhereWithAggregatesInput | BuyedCouseScalarWhereWithAggregatesInput[]
    OR?: BuyedCouseScalarWhereWithAggregatesInput[]
    NOT?: BuyedCouseScalarWhereWithAggregatesInput | BuyedCouseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BuyedCouse"> | number
    userId?: IntWithAggregatesFilter<"BuyedCouse"> | number
    courseId?: IntWithAggregatesFilter<"BuyedCouse"> | number
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesUncheckedCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodUncheckedCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUncheckedUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUncheckedUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
  }

  export type UserSessionsCreateInput = {
    refresh_token: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserSessionsInput
  }

  export type UserSessionsUncheckedCreateInput = {
    id?: number
    userId: number
    refresh_token: string
    createdAt?: Date | string
  }

  export type UserSessionsUpdateInput = {
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserSessionsNestedInput
  }

  export type UserSessionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionsCreateManyInput = {
    id?: number
    userId: number
    refresh_token: string
    createdAt?: Date | string
  }

  export type UserSessionsUpdateManyMutationInput = {
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInfoCreateInput = {
    firstName: string
    lastName: string
    birthdate: string
    phone: string
    user?: UserCreateNestedOneWithoutUserInfoInput
  }

  export type UserInfoUncheckedCreateInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    birthdate: string
    phone: string
  }

  export type UserInfoUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutUserInfoNestedInput
  }

  export type UserInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type UserInfoCreateManyInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    birthdate: string
    phone: string
  }

  export type UserInfoUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type UserInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentMethodCreateInput = {
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
    user: UserCreateNestedOneWithoutPaymentInput
  }

  export type PaymentMethodUncheckedCreateInput = {
    id?: number
    userId: number
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
  }

  export type PaymentMethodUpdateInput = {
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentMethodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentMethodCreateManyInput = {
    id?: number
    userId: number
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
  }

  export type PaymentMethodUpdateManyMutationInput = {
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentMethodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
  }

  export type LangCoursesCreateInput = {
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    users?: UserCreateNestedManyWithoutLangCoursesInput
    buyed?: BuyedCouseCreateNestedManyWithoutCourseInput
  }

  export type LangCoursesUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    users?: UserUncheckedCreateNestedManyWithoutLangCoursesInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type LangCoursesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    users?: UserUpdateManyWithoutLangCoursesNestedInput
    buyed?: BuyedCouseUpdateManyWithoutCourseNestedInput
  }

  export type LangCoursesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    users?: UserUncheckedUpdateManyWithoutLangCoursesNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type LangCoursesCreateManyInput = {
    id?: number
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
  }

  export type LangCoursesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
  }

  export type LangCoursesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
  }

  export type BuyedCouseCreateInput = {
    user?: UserCreateNestedOneWithoutBuyedInput
    course?: LangCoursesCreateNestedOneWithoutBuyedInput
  }

  export type BuyedCouseUncheckedCreateInput = {
    id?: number
    userId: number
    courseId: number
  }

  export type BuyedCouseUpdateInput = {
    user?: UserUpdateOneWithoutBuyedNestedInput
    course?: LangCoursesUpdateOneWithoutBuyedNestedInput
  }

  export type BuyedCouseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type BuyedCouseCreateManyInput = {
    id?: number
    userId: number
    courseId: number
  }

  export type BuyedCouseUpdateManyMutationInput = {

  }

  export type BuyedCouseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type UserSessionsListRelationFilter = {
    every?: UserSessionsWhereInput
    some?: UserSessionsWhereInput
    none?: UserSessionsWhereInput
  }

  export type UserInfoNullableRelationFilter = {
    is?: UserInfoWhereInput | null
    isNot?: UserInfoWhereInput | null
  }

  export type LangCoursesListRelationFilter = {
    every?: LangCoursesWhereInput
    some?: LangCoursesWhereInput
    none?: LangCoursesWhereInput
  }

  export type PaymentMethodNullableRelationFilter = {
    is?: PaymentMethodWhereInput | null
    isNot?: PaymentMethodWhereInput | null
  }

  export type BuyedCouseListRelationFilter = {
    every?: BuyedCouseWhereInput
    some?: BuyedCouseWhereInput
    none?: BuyedCouseWhereInput
  }

  export type UserSessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LangCoursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyedCouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    login?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    login?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    login?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSessionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refresh_token?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserSessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refresh_token?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refresh_token?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserInfoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthdate?: SortOrder
    phone?: SortOrder
  }

  export type UserInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthdate?: SortOrder
    phone?: SortOrder
  }

  export type UserInfoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthdate?: SortOrder
    phone?: SortOrder
  }

  export type UserInfoSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PaymentMethodCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardNumber?: SortOrder
    cardHolder?: SortOrder
    cardDate?: SortOrder
    cvv?: SortOrder
  }

  export type PaymentMethodAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PaymentMethodMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardNumber?: SortOrder
    cardHolder?: SortOrder
    cardDate?: SortOrder
    cvv?: SortOrder
  }

  export type PaymentMethodMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardNumber?: SortOrder
    cardHolder?: SortOrder
    cardDate?: SortOrder
    cvv?: SortOrder
  }

  export type PaymentMethodSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumLangsFilter<$PrismaModel = never> = {
    equals?: $Enums.Langs | EnumLangsFieldRefInput<$PrismaModel>
    in?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    not?: NestedEnumLangsFilter<$PrismaModel> | $Enums.Langs
  }

  export type EnumCoursesFormatsFilter<$PrismaModel = never> = {
    equals?: $Enums.CoursesFormats | EnumCoursesFormatsFieldRefInput<$PrismaModel>
    in?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    not?: NestedEnumCoursesFormatsFilter<$PrismaModel> | $Enums.CoursesFormats
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LangCoursesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    amountOfLessons?: SortOrder
    timeForLesson?: SortOrder
    timeForAllCourse?: SortOrder
    imgURL?: SortOrder
    lang?: SortOrder
    format?: SortOrder
  }

  export type LangCoursesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LangCoursesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    amountOfLessons?: SortOrder
    timeForLesson?: SortOrder
    timeForAllCourse?: SortOrder
    imgURL?: SortOrder
    lang?: SortOrder
    format?: SortOrder
  }

  export type LangCoursesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    amountOfLessons?: SortOrder
    timeForLesson?: SortOrder
    timeForAllCourse?: SortOrder
    imgURL?: SortOrder
    lang?: SortOrder
    format?: SortOrder
  }

  export type LangCoursesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumLangsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Langs | EnumLangsFieldRefInput<$PrismaModel>
    in?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    not?: NestedEnumLangsWithAggregatesFilter<$PrismaModel> | $Enums.Langs
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLangsFilter<$PrismaModel>
    _max?: NestedEnumLangsFilter<$PrismaModel>
  }

  export type EnumCoursesFormatsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoursesFormats | EnumCoursesFormatsFieldRefInput<$PrismaModel>
    in?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    not?: NestedEnumCoursesFormatsWithAggregatesFilter<$PrismaModel> | $Enums.CoursesFormats
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoursesFormatsFilter<$PrismaModel>
    _max?: NestedEnumCoursesFormatsFilter<$PrismaModel>
  }

  export type LangCoursesNullableRelationFilter = {
    is?: LangCoursesWhereInput | null
    isNot?: LangCoursesWhereInput | null
  }

  export type BuyedCouseCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
  }

  export type BuyedCouseAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
  }

  export type BuyedCouseMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
  }

  export type BuyedCouseMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
  }

  export type BuyedCouseSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
  }

  export type UserSessionsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput> | UserSessionsCreateWithoutUserInput[] | UserSessionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionsCreateOrConnectWithoutUserInput | UserSessionsCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionsCreateManyUserInputEnvelope
    connect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
  }

  export type UserInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    connect?: UserInfoWhereUniqueInput
  }

  export type LangCoursesCreateNestedManyWithoutUsersInput = {
    create?: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput> | LangCoursesCreateWithoutUsersInput[] | LangCoursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LangCoursesCreateOrConnectWithoutUsersInput | LangCoursesCreateOrConnectWithoutUsersInput[]
    connect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
  }

  export type PaymentMethodCreateNestedOneWithoutUserInput = {
    create?: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutUserInput
    connect?: PaymentMethodWhereUniqueInput
  }

  export type BuyedCouseCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput> | BuyedCouseCreateWithoutUserInput[] | BuyedCouseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutUserInput | BuyedCouseCreateOrConnectWithoutUserInput[]
    createMany?: BuyedCouseCreateManyUserInputEnvelope
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
  }

  export type UserSessionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput> | UserSessionsCreateWithoutUserInput[] | UserSessionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionsCreateOrConnectWithoutUserInput | UserSessionsCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionsCreateManyUserInputEnvelope
    connect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
  }

  export type UserInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    connect?: UserInfoWhereUniqueInput
  }

  export type LangCoursesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput> | LangCoursesCreateWithoutUsersInput[] | LangCoursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LangCoursesCreateOrConnectWithoutUsersInput | LangCoursesCreateOrConnectWithoutUsersInput[]
    connect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
  }

  export type PaymentMethodUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutUserInput
    connect?: PaymentMethodWhereUniqueInput
  }

  export type BuyedCouseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput> | BuyedCouseCreateWithoutUserInput[] | BuyedCouseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutUserInput | BuyedCouseCreateOrConnectWithoutUserInput[]
    createMany?: BuyedCouseCreateManyUserInputEnvelope
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRolesFieldUpdateOperationsInput = {
    set?: $Enums.Roles
  }

  export type UserSessionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput> | UserSessionsCreateWithoutUserInput[] | UserSessionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionsCreateOrConnectWithoutUserInput | UserSessionsCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionsUpsertWithWhereUniqueWithoutUserInput | UserSessionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionsCreateManyUserInputEnvelope
    set?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    disconnect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    delete?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    connect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    update?: UserSessionsUpdateWithWhereUniqueWithoutUserInput | UserSessionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionsUpdateManyWithWhereWithoutUserInput | UserSessionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionsScalarWhereInput | UserSessionsScalarWhereInput[]
  }

  export type UserInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    upsert?: UserInfoUpsertWithoutUserInput
    disconnect?: UserInfoWhereInput | boolean
    delete?: UserInfoWhereInput | boolean
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutUserInput, UserInfoUpdateWithoutUserInput>, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type LangCoursesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput> | LangCoursesCreateWithoutUsersInput[] | LangCoursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LangCoursesCreateOrConnectWithoutUsersInput | LangCoursesCreateOrConnectWithoutUsersInput[]
    upsert?: LangCoursesUpsertWithWhereUniqueWithoutUsersInput | LangCoursesUpsertWithWhereUniqueWithoutUsersInput[]
    set?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    disconnect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    delete?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    connect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    update?: LangCoursesUpdateWithWhereUniqueWithoutUsersInput | LangCoursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LangCoursesUpdateManyWithWhereWithoutUsersInput | LangCoursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LangCoursesScalarWhereInput | LangCoursesScalarWhereInput[]
  }

  export type PaymentMethodUpdateOneWithoutUserNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutUserInput
    upsert?: PaymentMethodUpsertWithoutUserInput
    disconnect?: PaymentMethodWhereInput | boolean
    delete?: PaymentMethodWhereInput | boolean
    connect?: PaymentMethodWhereUniqueInput
    update?: XOR<XOR<PaymentMethodUpdateToOneWithWhereWithoutUserInput, PaymentMethodUpdateWithoutUserInput>, PaymentMethodUncheckedUpdateWithoutUserInput>
  }

  export type BuyedCouseUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput> | BuyedCouseCreateWithoutUserInput[] | BuyedCouseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutUserInput | BuyedCouseCreateOrConnectWithoutUserInput[]
    upsert?: BuyedCouseUpsertWithWhereUniqueWithoutUserInput | BuyedCouseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyedCouseCreateManyUserInputEnvelope
    set?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    disconnect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    delete?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    update?: BuyedCouseUpdateWithWhereUniqueWithoutUserInput | BuyedCouseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyedCouseUpdateManyWithWhereWithoutUserInput | BuyedCouseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserSessionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput> | UserSessionsCreateWithoutUserInput[] | UserSessionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionsCreateOrConnectWithoutUserInput | UserSessionsCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionsUpsertWithWhereUniqueWithoutUserInput | UserSessionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionsCreateManyUserInputEnvelope
    set?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    disconnect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    delete?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    connect?: UserSessionsWhereUniqueInput | UserSessionsWhereUniqueInput[]
    update?: UserSessionsUpdateWithWhereUniqueWithoutUserInput | UserSessionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionsUpdateManyWithWhereWithoutUserInput | UserSessionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionsScalarWhereInput | UserSessionsScalarWhereInput[]
  }

  export type UserInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutUserInput
    upsert?: UserInfoUpsertWithoutUserInput
    disconnect?: UserInfoWhereInput | boolean
    delete?: UserInfoWhereInput | boolean
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutUserInput, UserInfoUpdateWithoutUserInput>, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type LangCoursesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput> | LangCoursesCreateWithoutUsersInput[] | LangCoursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LangCoursesCreateOrConnectWithoutUsersInput | LangCoursesCreateOrConnectWithoutUsersInput[]
    upsert?: LangCoursesUpsertWithWhereUniqueWithoutUsersInput | LangCoursesUpsertWithWhereUniqueWithoutUsersInput[]
    set?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    disconnect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    delete?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    connect?: LangCoursesWhereUniqueInput | LangCoursesWhereUniqueInput[]
    update?: LangCoursesUpdateWithWhereUniqueWithoutUsersInput | LangCoursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LangCoursesUpdateManyWithWhereWithoutUsersInput | LangCoursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LangCoursesScalarWhereInput | LangCoursesScalarWhereInput[]
  }

  export type PaymentMethodUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutUserInput
    upsert?: PaymentMethodUpsertWithoutUserInput
    disconnect?: PaymentMethodWhereInput | boolean
    delete?: PaymentMethodWhereInput | boolean
    connect?: PaymentMethodWhereUniqueInput
    update?: XOR<XOR<PaymentMethodUpdateToOneWithWhereWithoutUserInput, PaymentMethodUpdateWithoutUserInput>, PaymentMethodUncheckedUpdateWithoutUserInput>
  }

  export type BuyedCouseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput> | BuyedCouseCreateWithoutUserInput[] | BuyedCouseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutUserInput | BuyedCouseCreateOrConnectWithoutUserInput[]
    upsert?: BuyedCouseUpsertWithWhereUniqueWithoutUserInput | BuyedCouseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyedCouseCreateManyUserInputEnvelope
    set?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    disconnect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    delete?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    update?: BuyedCouseUpdateWithWhereUniqueWithoutUserInput | BuyedCouseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyedCouseUpdateManyWithWhereWithoutUserInput | BuyedCouseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserSessionsInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSessionsNestedInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    upsert?: UserUpsertWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSessionsInput, UserUpdateWithoutUserSessionsInput>, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserCreateNestedOneWithoutUserInfoInput = {
    create?: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInfoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutUserInfoNestedInput = {
    create?: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInfoInput
    upsert?: UserUpsertWithoutUserInfoInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserInfoInput, UserUpdateWithoutUserInfoInput>, UserUncheckedUpdateWithoutUserInfoInput>
  }

  export type UserCreateNestedOneWithoutPaymentInput = {
    create?: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentInput
    upsert?: UserUpsertWithoutPaymentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentInput, UserUpdateWithoutPaymentInput>, UserUncheckedUpdateWithoutPaymentInput>
  }

  export type UserCreateNestedManyWithoutLangCoursesInput = {
    create?: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput> | UserCreateWithoutLangCoursesInput[] | UserUncheckedCreateWithoutLangCoursesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLangCoursesInput | UserCreateOrConnectWithoutLangCoursesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BuyedCouseCreateNestedManyWithoutCourseInput = {
    create?: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput> | BuyedCouseCreateWithoutCourseInput[] | BuyedCouseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutCourseInput | BuyedCouseCreateOrConnectWithoutCourseInput[]
    createMany?: BuyedCouseCreateManyCourseInputEnvelope
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLangCoursesInput = {
    create?: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput> | UserCreateWithoutLangCoursesInput[] | UserUncheckedCreateWithoutLangCoursesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLangCoursesInput | UserCreateOrConnectWithoutLangCoursesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BuyedCouseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput> | BuyedCouseCreateWithoutCourseInput[] | BuyedCouseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutCourseInput | BuyedCouseCreateOrConnectWithoutCourseInput[]
    createMany?: BuyedCouseCreateManyCourseInputEnvelope
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
  }

  export type EnumLangsFieldUpdateOperationsInput = {
    set?: $Enums.Langs
  }

  export type EnumCoursesFormatsFieldUpdateOperationsInput = {
    set?: $Enums.CoursesFormats
  }

  export type UserUpdateManyWithoutLangCoursesNestedInput = {
    create?: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput> | UserCreateWithoutLangCoursesInput[] | UserUncheckedCreateWithoutLangCoursesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLangCoursesInput | UserCreateOrConnectWithoutLangCoursesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLangCoursesInput | UserUpsertWithWhereUniqueWithoutLangCoursesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLangCoursesInput | UserUpdateWithWhereUniqueWithoutLangCoursesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLangCoursesInput | UserUpdateManyWithWhereWithoutLangCoursesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BuyedCouseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput> | BuyedCouseCreateWithoutCourseInput[] | BuyedCouseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutCourseInput | BuyedCouseCreateOrConnectWithoutCourseInput[]
    upsert?: BuyedCouseUpsertWithWhereUniqueWithoutCourseInput | BuyedCouseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: BuyedCouseCreateManyCourseInputEnvelope
    set?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    disconnect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    delete?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    update?: BuyedCouseUpdateWithWhereUniqueWithoutCourseInput | BuyedCouseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: BuyedCouseUpdateManyWithWhereWithoutCourseInput | BuyedCouseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLangCoursesNestedInput = {
    create?: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput> | UserCreateWithoutLangCoursesInput[] | UserUncheckedCreateWithoutLangCoursesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLangCoursesInput | UserCreateOrConnectWithoutLangCoursesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLangCoursesInput | UserUpsertWithWhereUniqueWithoutLangCoursesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLangCoursesInput | UserUpdateWithWhereUniqueWithoutLangCoursesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLangCoursesInput | UserUpdateManyWithWhereWithoutLangCoursesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BuyedCouseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput> | BuyedCouseCreateWithoutCourseInput[] | BuyedCouseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: BuyedCouseCreateOrConnectWithoutCourseInput | BuyedCouseCreateOrConnectWithoutCourseInput[]
    upsert?: BuyedCouseUpsertWithWhereUniqueWithoutCourseInput | BuyedCouseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: BuyedCouseCreateManyCourseInputEnvelope
    set?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    disconnect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    delete?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    connect?: BuyedCouseWhereUniqueInput | BuyedCouseWhereUniqueInput[]
    update?: BuyedCouseUpdateWithWhereUniqueWithoutCourseInput | BuyedCouseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: BuyedCouseUpdateManyWithWhereWithoutCourseInput | BuyedCouseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBuyedInput = {
    create?: XOR<UserCreateWithoutBuyedInput, UserUncheckedCreateWithoutBuyedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyedInput
    connect?: UserWhereUniqueInput
  }

  export type LangCoursesCreateNestedOneWithoutBuyedInput = {
    create?: XOR<LangCoursesCreateWithoutBuyedInput, LangCoursesUncheckedCreateWithoutBuyedInput>
    connectOrCreate?: LangCoursesCreateOrConnectWithoutBuyedInput
    connect?: LangCoursesWhereUniqueInput
  }

  export type UserUpdateOneWithoutBuyedNestedInput = {
    create?: XOR<UserCreateWithoutBuyedInput, UserUncheckedCreateWithoutBuyedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyedInput
    upsert?: UserUpsertWithoutBuyedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBuyedInput, UserUpdateWithoutBuyedInput>, UserUncheckedUpdateWithoutBuyedInput>
  }

  export type LangCoursesUpdateOneWithoutBuyedNestedInput = {
    create?: XOR<LangCoursesCreateWithoutBuyedInput, LangCoursesUncheckedCreateWithoutBuyedInput>
    connectOrCreate?: LangCoursesCreateOrConnectWithoutBuyedInput
    upsert?: LangCoursesUpsertWithoutBuyedInput
    disconnect?: LangCoursesWhereInput | boolean
    delete?: LangCoursesWhereInput | boolean
    connect?: LangCoursesWhereUniqueInput
    update?: XOR<XOR<LangCoursesUpdateToOneWithWhereWithoutBuyedInput, LangCoursesUpdateWithoutBuyedInput>, LangCoursesUncheckedUpdateWithoutBuyedInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type NestedEnumLangsFilter<$PrismaModel = never> = {
    equals?: $Enums.Langs | EnumLangsFieldRefInput<$PrismaModel>
    in?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    not?: NestedEnumLangsFilter<$PrismaModel> | $Enums.Langs
  }

  export type NestedEnumCoursesFormatsFilter<$PrismaModel = never> = {
    equals?: $Enums.CoursesFormats | EnumCoursesFormatsFieldRefInput<$PrismaModel>
    in?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    not?: NestedEnumCoursesFormatsFilter<$PrismaModel> | $Enums.CoursesFormats
  }

  export type NestedEnumLangsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Langs | EnumLangsFieldRefInput<$PrismaModel>
    in?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Langs[] | ListEnumLangsFieldRefInput<$PrismaModel>
    not?: NestedEnumLangsWithAggregatesFilter<$PrismaModel> | $Enums.Langs
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLangsFilter<$PrismaModel>
    _max?: NestedEnumLangsFilter<$PrismaModel>
  }

  export type NestedEnumCoursesFormatsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoursesFormats | EnumCoursesFormatsFieldRefInput<$PrismaModel>
    in?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoursesFormats[] | ListEnumCoursesFormatsFieldRefInput<$PrismaModel>
    not?: NestedEnumCoursesFormatsWithAggregatesFilter<$PrismaModel> | $Enums.CoursesFormats
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoursesFormatsFilter<$PrismaModel>
    _max?: NestedEnumCoursesFormatsFilter<$PrismaModel>
  }

  export type UserSessionsCreateWithoutUserInput = {
    refresh_token: string
    createdAt?: Date | string
  }

  export type UserSessionsUncheckedCreateWithoutUserInput = {
    id?: number
    refresh_token: string
    createdAt?: Date | string
  }

  export type UserSessionsCreateOrConnectWithoutUserInput = {
    where: UserSessionsWhereUniqueInput
    create: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput>
  }

  export type UserSessionsCreateManyUserInputEnvelope = {
    data: UserSessionsCreateManyUserInput | UserSessionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserInfoCreateWithoutUserInput = {
    firstName: string
    lastName: string
    birthdate: string
    phone: string
  }

  export type UserInfoUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    birthdate: string
    phone: string
  }

  export type UserInfoCreateOrConnectWithoutUserInput = {
    where: UserInfoWhereUniqueInput
    create: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
  }

  export type LangCoursesCreateWithoutUsersInput = {
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    buyed?: BuyedCouseCreateNestedManyWithoutCourseInput
  }

  export type LangCoursesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type LangCoursesCreateOrConnectWithoutUsersInput = {
    where: LangCoursesWhereUniqueInput
    create: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput>
  }

  export type PaymentMethodCreateWithoutUserInput = {
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
  }

  export type PaymentMethodUncheckedCreateWithoutUserInput = {
    id?: number
    cardNumber: string
    cardHolder: string
    cardDate: string
    cvv: string
  }

  export type PaymentMethodCreateOrConnectWithoutUserInput = {
    where: PaymentMethodWhereUniqueInput
    create: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
  }

  export type BuyedCouseCreateWithoutUserInput = {
    course?: LangCoursesCreateNestedOneWithoutBuyedInput
  }

  export type BuyedCouseUncheckedCreateWithoutUserInput = {
    id?: number
    courseId: number
  }

  export type BuyedCouseCreateOrConnectWithoutUserInput = {
    where: BuyedCouseWhereUniqueInput
    create: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput>
  }

  export type BuyedCouseCreateManyUserInputEnvelope = {
    data: BuyedCouseCreateManyUserInput | BuyedCouseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionsWhereUniqueInput
    update: XOR<UserSessionsUpdateWithoutUserInput, UserSessionsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionsCreateWithoutUserInput, UserSessionsUncheckedCreateWithoutUserInput>
  }

  export type UserSessionsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionsWhereUniqueInput
    data: XOR<UserSessionsUpdateWithoutUserInput, UserSessionsUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionsUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionsScalarWhereInput
    data: XOR<UserSessionsUpdateManyMutationInput, UserSessionsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionsScalarWhereInput = {
    AND?: UserSessionsScalarWhereInput | UserSessionsScalarWhereInput[]
    OR?: UserSessionsScalarWhereInput[]
    NOT?: UserSessionsScalarWhereInput | UserSessionsScalarWhereInput[]
    id?: IntFilter<"UserSessions"> | number
    userId?: IntFilter<"UserSessions"> | number
    refresh_token?: StringFilter<"UserSessions"> | string
    createdAt?: DateTimeFilter<"UserSessions"> | Date | string
  }

  export type UserInfoUpsertWithoutUserInput = {
    update: XOR<UserInfoUpdateWithoutUserInput, UserInfoUncheckedUpdateWithoutUserInput>
    create: XOR<UserInfoCreateWithoutUserInput, UserInfoUncheckedCreateWithoutUserInput>
    where?: UserInfoWhereInput
  }

  export type UserInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: UserInfoWhereInput
    data: XOR<UserInfoUpdateWithoutUserInput, UserInfoUncheckedUpdateWithoutUserInput>
  }

  export type UserInfoUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type UserInfoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type LangCoursesUpsertWithWhereUniqueWithoutUsersInput = {
    where: LangCoursesWhereUniqueInput
    update: XOR<LangCoursesUpdateWithoutUsersInput, LangCoursesUncheckedUpdateWithoutUsersInput>
    create: XOR<LangCoursesCreateWithoutUsersInput, LangCoursesUncheckedCreateWithoutUsersInput>
  }

  export type LangCoursesUpdateWithWhereUniqueWithoutUsersInput = {
    where: LangCoursesWhereUniqueInput
    data: XOR<LangCoursesUpdateWithoutUsersInput, LangCoursesUncheckedUpdateWithoutUsersInput>
  }

  export type LangCoursesUpdateManyWithWhereWithoutUsersInput = {
    where: LangCoursesScalarWhereInput
    data: XOR<LangCoursesUpdateManyMutationInput, LangCoursesUncheckedUpdateManyWithoutUsersInput>
  }

  export type LangCoursesScalarWhereInput = {
    AND?: LangCoursesScalarWhereInput | LangCoursesScalarWhereInput[]
    OR?: LangCoursesScalarWhereInput[]
    NOT?: LangCoursesScalarWhereInput | LangCoursesScalarWhereInput[]
    id?: IntFilter<"LangCourses"> | number
    title?: StringFilter<"LangCourses"> | string
    description?: StringFilter<"LangCourses"> | string
    price?: StringFilter<"LangCourses"> | string
    amountOfLessons?: StringFilter<"LangCourses"> | string
    timeForLesson?: StringFilter<"LangCourses"> | string
    timeForAllCourse?: StringFilter<"LangCourses"> | string
    imgURL?: StringFilter<"LangCourses"> | string
    lang?: EnumLangsFilter<"LangCourses"> | $Enums.Langs
    format?: EnumCoursesFormatsFilter<"LangCourses"> | $Enums.CoursesFormats
  }

  export type PaymentMethodUpsertWithoutUserInput = {
    update: XOR<PaymentMethodUpdateWithoutUserInput, PaymentMethodUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentMethodCreateWithoutUserInput, PaymentMethodUncheckedCreateWithoutUserInput>
    where?: PaymentMethodWhereInput
  }

  export type PaymentMethodUpdateToOneWithWhereWithoutUserInput = {
    where?: PaymentMethodWhereInput
    data: XOR<PaymentMethodUpdateWithoutUserInput, PaymentMethodUncheckedUpdateWithoutUserInput>
  }

  export type PaymentMethodUpdateWithoutUserInput = {
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentMethodUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardHolder?: StringFieldUpdateOperationsInput | string
    cardDate?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
  }

  export type BuyedCouseUpsertWithWhereUniqueWithoutUserInput = {
    where: BuyedCouseWhereUniqueInput
    update: XOR<BuyedCouseUpdateWithoutUserInput, BuyedCouseUncheckedUpdateWithoutUserInput>
    create: XOR<BuyedCouseCreateWithoutUserInput, BuyedCouseUncheckedCreateWithoutUserInput>
  }

  export type BuyedCouseUpdateWithWhereUniqueWithoutUserInput = {
    where: BuyedCouseWhereUniqueInput
    data: XOR<BuyedCouseUpdateWithoutUserInput, BuyedCouseUncheckedUpdateWithoutUserInput>
  }

  export type BuyedCouseUpdateManyWithWhereWithoutUserInput = {
    where: BuyedCouseScalarWhereInput
    data: XOR<BuyedCouseUpdateManyMutationInput, BuyedCouseUncheckedUpdateManyWithoutUserInput>
  }

  export type BuyedCouseScalarWhereInput = {
    AND?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
    OR?: BuyedCouseScalarWhereInput[]
    NOT?: BuyedCouseScalarWhereInput | BuyedCouseScalarWhereInput[]
    id?: IntFilter<"BuyedCouse"> | number
    userId?: IntFilter<"BuyedCouse"> | number
    courseId?: IntFilter<"BuyedCouse"> | number
  }

  export type UserCreateWithoutUserSessionsInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserSessionsInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesUncheckedCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodUncheckedCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
  }

  export type UserUpsertWithoutUserSessionsInput = {
    update: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserUpdateWithoutUserSessionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUncheckedUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUncheckedUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserInfoInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsCreateNestedManyWithoutUserInput
    langCourses?: LangCoursesCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserInfoInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsUncheckedCreateNestedManyWithoutUserInput
    langCourses?: LangCoursesUncheckedCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodUncheckedCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
  }

  export type UserUpsertWithoutUserInfoInput = {
    update: XOR<UserUpdateWithoutUserInfoInput, UserUncheckedUpdateWithoutUserInfoInput>
    create: XOR<UserCreateWithoutUserInfoInput, UserUncheckedCreateWithoutUserInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserInfoInput, UserUncheckedUpdateWithoutUserInfoInput>
  }

  export type UserUpdateWithoutUserInfoInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUpdateManyWithoutUserNestedInput
    langCourses?: LangCoursesUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUncheckedUpdateManyWithoutUserNestedInput
    langCourses?: LangCoursesUncheckedUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUncheckedUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPaymentInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesCreateNestedManyWithoutUsersInput
    buyed?: BuyedCouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesUncheckedCreateNestedManyWithoutUsersInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
  }

  export type UserUpsertWithoutPaymentInput = {
    update: XOR<UserUpdateWithoutPaymentInput, UserUncheckedUpdateWithoutPaymentInput>
    create: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentInput, UserUncheckedUpdateWithoutPaymentInput>
  }

  export type UserUpdateWithoutPaymentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUpdateManyWithoutUsersNestedInput
    buyed?: BuyedCouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUncheckedUpdateManyWithoutUsersNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLangCoursesInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    payment?: PaymentMethodCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLangCoursesInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    payment?: PaymentMethodUncheckedCreateNestedOneWithoutUserInput
    buyed?: BuyedCouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLangCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput>
  }

  export type BuyedCouseCreateWithoutCourseInput = {
    user?: UserCreateNestedOneWithoutBuyedInput
  }

  export type BuyedCouseUncheckedCreateWithoutCourseInput = {
    id?: number
    userId: number
  }

  export type BuyedCouseCreateOrConnectWithoutCourseInput = {
    where: BuyedCouseWhereUniqueInput
    create: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput>
  }

  export type BuyedCouseCreateManyCourseInputEnvelope = {
    data: BuyedCouseCreateManyCourseInput | BuyedCouseCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutLangCoursesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLangCoursesInput, UserUncheckedUpdateWithoutLangCoursesInput>
    create: XOR<UserCreateWithoutLangCoursesInput, UserUncheckedCreateWithoutLangCoursesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLangCoursesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLangCoursesInput, UserUncheckedUpdateWithoutLangCoursesInput>
  }

  export type UserUpdateManyWithWhereWithoutLangCoursesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLangCoursesInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    login?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRolesFilter<"User"> | $Enums.Roles
  }

  export type BuyedCouseUpsertWithWhereUniqueWithoutCourseInput = {
    where: BuyedCouseWhereUniqueInput
    update: XOR<BuyedCouseUpdateWithoutCourseInput, BuyedCouseUncheckedUpdateWithoutCourseInput>
    create: XOR<BuyedCouseCreateWithoutCourseInput, BuyedCouseUncheckedCreateWithoutCourseInput>
  }

  export type BuyedCouseUpdateWithWhereUniqueWithoutCourseInput = {
    where: BuyedCouseWhereUniqueInput
    data: XOR<BuyedCouseUpdateWithoutCourseInput, BuyedCouseUncheckedUpdateWithoutCourseInput>
  }

  export type BuyedCouseUpdateManyWithWhereWithoutCourseInput = {
    where: BuyedCouseScalarWhereInput
    data: XOR<BuyedCouseUpdateManyMutationInput, BuyedCouseUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserCreateWithoutBuyedInput = {
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsCreateNestedManyWithoutUserInput
    userInfo?: UserInfoCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBuyedInput = {
    id?: number
    createdAt?: Date | string
    login: string
    email: string
    password: string
    role?: $Enums.Roles
    userSessions?: UserSessionsUncheckedCreateNestedManyWithoutUserInput
    userInfo?: UserInfoUncheckedCreateNestedOneWithoutUserInput
    langCourses?: LangCoursesUncheckedCreateNestedManyWithoutUsersInput
    payment?: PaymentMethodUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBuyedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBuyedInput, UserUncheckedCreateWithoutBuyedInput>
  }

  export type LangCoursesCreateWithoutBuyedInput = {
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    users?: UserCreateNestedManyWithoutLangCoursesInput
  }

  export type LangCoursesUncheckedCreateWithoutBuyedInput = {
    id?: number
    title: string
    description: string
    price: string
    amountOfLessons: string
    timeForLesson: string
    timeForAllCourse: string
    imgURL: string
    lang: $Enums.Langs
    format: $Enums.CoursesFormats
    users?: UserUncheckedCreateNestedManyWithoutLangCoursesInput
  }

  export type LangCoursesCreateOrConnectWithoutBuyedInput = {
    where: LangCoursesWhereUniqueInput
    create: XOR<LangCoursesCreateWithoutBuyedInput, LangCoursesUncheckedCreateWithoutBuyedInput>
  }

  export type UserUpsertWithoutBuyedInput = {
    update: XOR<UserUpdateWithoutBuyedInput, UserUncheckedUpdateWithoutBuyedInput>
    create: XOR<UserCreateWithoutBuyedInput, UserUncheckedCreateWithoutBuyedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBuyedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBuyedInput, UserUncheckedUpdateWithoutBuyedInput>
  }

  export type UserUpdateWithoutBuyedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBuyedInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    langCourses?: LangCoursesUncheckedUpdateManyWithoutUsersNestedInput
    payment?: PaymentMethodUncheckedUpdateOneWithoutUserNestedInput
  }

  export type LangCoursesUpsertWithoutBuyedInput = {
    update: XOR<LangCoursesUpdateWithoutBuyedInput, LangCoursesUncheckedUpdateWithoutBuyedInput>
    create: XOR<LangCoursesCreateWithoutBuyedInput, LangCoursesUncheckedCreateWithoutBuyedInput>
    where?: LangCoursesWhereInput
  }

  export type LangCoursesUpdateToOneWithWhereWithoutBuyedInput = {
    where?: LangCoursesWhereInput
    data: XOR<LangCoursesUpdateWithoutBuyedInput, LangCoursesUncheckedUpdateWithoutBuyedInput>
  }

  export type LangCoursesUpdateWithoutBuyedInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    users?: UserUpdateManyWithoutLangCoursesNestedInput
  }

  export type LangCoursesUncheckedUpdateWithoutBuyedInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    users?: UserUncheckedUpdateManyWithoutLangCoursesNestedInput
  }

  export type UserSessionsCreateManyUserInput = {
    id?: number
    refresh_token: string
    createdAt?: Date | string
  }

  export type BuyedCouseCreateManyUserInput = {
    id?: number
    courseId: number
  }

  export type UserSessionsUpdateWithoutUserInput = {
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    refresh_token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LangCoursesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    buyed?: BuyedCouseUpdateManyWithoutCourseNestedInput
  }

  export type LangCoursesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
    buyed?: BuyedCouseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type LangCoursesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    amountOfLessons?: StringFieldUpdateOperationsInput | string
    timeForLesson?: StringFieldUpdateOperationsInput | string
    timeForAllCourse?: StringFieldUpdateOperationsInput | string
    imgURL?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangsFieldUpdateOperationsInput | $Enums.Langs
    format?: EnumCoursesFormatsFieldUpdateOperationsInput | $Enums.CoursesFormats
  }

  export type BuyedCouseUpdateWithoutUserInput = {
    course?: LangCoursesUpdateOneWithoutBuyedNestedInput
  }

  export type BuyedCouseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type BuyedCouseUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type BuyedCouseCreateManyCourseInput = {
    id?: number
    userId: number
  }

  export type UserUpdateWithoutLangCoursesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUpdateOneWithoutUserNestedInput
    payment?: PaymentMethodUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLangCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    userSessions?: UserSessionsUncheckedUpdateManyWithoutUserNestedInput
    userInfo?: UserInfoUncheckedUpdateOneWithoutUserNestedInput
    payment?: PaymentMethodUncheckedUpdateOneWithoutUserNestedInput
    buyed?: BuyedCouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLangCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
  }

  export type BuyedCouseUpdateWithoutCourseInput = {
    user?: UserUpdateOneWithoutBuyedNestedInput
  }

  export type BuyedCouseUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type BuyedCouseUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LangCoursesCountOutputTypeDefaultArgs instead
     */
    export type LangCoursesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LangCoursesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSessionsDefaultArgs instead
     */
    export type UserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSessionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInfoDefaultArgs instead
     */
    export type UserInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentMethodDefaultArgs instead
     */
    export type PaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentMethodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LangCoursesDefaultArgs instead
     */
    export type LangCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LangCoursesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuyedCouseDefaultArgs instead
     */
    export type BuyedCouseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyedCouseDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}